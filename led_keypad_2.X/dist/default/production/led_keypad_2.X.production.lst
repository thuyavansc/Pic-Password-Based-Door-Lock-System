

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Jul 10 16:59:31 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	text14,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.05
    26                           ; Generated 20/12/2018 GMT
    27                           ; 
    28                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175                           
   176                           	psect	strings
   177  0003                     __pstrings:	
   178  0003                     stringtab:	
   179  0003                     __stringtab:	
   180                           
   181                           ;	String table - string pointers are 1 byte each
   182  0003  1BFF               	btfsc	btemp+1,7
   183  0004  280D               	ljmp	stringcode
   184  0005  1383               	bcf	3,7
   185  0006  187F               	btfsc	btemp+1,0
   186  0007  1783               	bsf	3,7
   187  0008  0800               	movf	0,w
   188  0009  0A84               	incf	4,f
   189  000A  1903               	skipnz
   190  000B  0AFF               	incf	btemp+1,f
   191  000C  0008               	return
   192  000D                     stringcode:	
   193  000D                     stringdir:	
   194  000D  3000               	movlw	high stringdir
   195  000E  008A               	movwf	10
   196  000F  0804               	movf	4,w
   197  0010  0A84               	incf	4,f
   198  0011  0782               	addwf	2,f
   199  0012                     __stringbase:	
   200  0012  3400               	retlw	0
   201  0013                     __end_of__stringtab:	
   202  0013                     _dpowers:	
   203  0013  3401               	retlw	1
   204  0014  3400               	retlw	0
   205  0015  340A               	retlw	10
   206  0016  3400               	retlw	0
   207  0017  3464               	retlw	100
   208  0018  3400               	retlw	0
   209  0019  34E8               	retlw	232
   210  001A  3403               	retlw	3
   211  001B  3410               	retlw	16
   212  001C  3427               	retlw	39
   213  001D                     __end_of_dpowers:	
   214  0007                     _PORTCbits	set	7
   215  0006                     _PORTB	set	6
   216  0036                     _RB6	set	54
   217  0035                     _RB5	set	53
   218  0034                     _RB4	set	52
   219  0033                     _RB3	set	51
   220  0032                     _RB2	set	50
   221  0031                     _RB1	set	49
   222  0030                     _RB0	set	48
   223  0043                     _RD3	set	67
   224  0042                     _RD2	set	66
   225  0047                     _RD7	set	71
   226  0046                     _RD6	set	70
   227  0045                     _RD5	set	69
   228  0044                     _RD4	set	68
   229  0088                     _TRISD	set	136
   230  0087                     _TRISC	set	135
   231  0081                     _OPTION_REG	set	129
   232  0086                     _TRISB	set	134
   233  001D                     STR_4:	
   234  001D  3443               	retlw	67	;'C'
   235  001E  346F               	retlw	111	;'o'
   236  001F  3472               	retlw	114	;'r'
   237  0020  3472               	retlw	114	;'r'
   238  0021  3465               	retlw	101	;'e'
   239  0022  3463               	retlw	99	;'c'
   240  0023  3474               	retlw	116	;'t'
   241  0024  3420               	retlw	32	;' '
   242  0025  3450               	retlw	80	;'P'
   243  0026  3461               	retlw	97	;'a'
   244  0027  3473               	retlw	115	;'s'
   245  0028  3473               	retlw	115	;'s'
   246  0029  3477               	retlw	119	;'w'
   247  002A  346F               	retlw	111	;'o'
   248  002B  3472               	retlw	114	;'r'
   249  002C  3464               	retlw	100	;'d'
   250  002D  3400               	retlw	0
   251  002E                     STR_1:	
   252  002E  3457               	retlw	87	;'W'
   253  002F  3445               	retlw	69	;'E'
   254  0030  346C               	retlw	108	;'l'
   255  0031  3463               	retlw	99	;'c'
   256  0032  346F               	retlw	111	;'o'
   257  0033  346D               	retlw	109	;'m'
   258  0034  3465               	retlw	101	;'e'
   259  0035  3420               	retlw	32	;' '
   260  0036  3454               	retlw	84	;'T'
   261  0037  344F               	retlw	79	;'O'
   262  0038  3420               	retlw	32	;' '
   263  0039  3453               	retlw	83	;'S'
   264  003A  344C               	retlw	76	;'L'
   265  003B  3454               	retlw	84	;'T'
   266  003C  3443               	retlw	67	;'C'
   267  003D  3400               	retlw	0
   268  003E                     STR_10:	
   269  003E  3457               	retlw	87	;'W'
   270  003F  3461               	retlw	97	;'a'
   271  0040  3469               	retlw	105	;'i'
   272  0041  3474               	retlw	116	;'t'
   273  0042  3420               	retlw	32	;' '
   274  0043  3446               	retlw	70	;'F'
   275  0044  346F               	retlw	111	;'o'
   276  0045  3472               	retlw	114	;'r'
   277  0046  3420               	retlw	32	;' '
   278  0047  3433               	retlw	51	;'3'
   279  0048  3430               	retlw	48	;'0'
   280  0049  3420               	retlw	32	;' '
   281  004A  3453               	retlw	83	;'S'
   282  004B  3465               	retlw	101	;'e'
   283  004C  3463               	retlw	99	;'c'
   284  004D  3400               	retlw	0
   285  004E                     STR_6:	
   286  004E  3452               	retlw	82	;'R'
   287  004F  3465               	retlw	101	;'e'
   288  0050  3473               	retlw	115	;'s'
   289  0051  3465               	retlw	101	;'e'
   290  0052  3474               	retlw	116	;'t'
   291  0053  3420               	retlw	32	;' '
   292  0054  3450               	retlw	80	;'P'
   293  0055  3461               	retlw	97	;'a'
   294  0056  3473               	retlw	115	;'s'
   295  0057  3473               	retlw	115	;'s'
   296  0058  3477               	retlw	119	;'w'
   297  0059  346F               	retlw	111	;'o'
   298  005A  3472               	retlw	114	;'r'
   299  005B  3464               	retlw	100	;'d'
   300  005C  3400               	retlw	0
   301  005D                     STR_7:	
   302  005D  3445               	retlw	69	;'E'
   303  005E  346E               	retlw	110	;'n'
   304  005F  3474               	retlw	116	;'t'
   305  0060  3465               	retlw	101	;'e'
   306  0061  3472               	retlw	114	;'r'
   307  0062  3420               	retlw	32	;' '
   308  0063  3450               	retlw	80	;'P'
   309  0064  3457               	retlw	87	;'W'
   310  0065  3420               	retlw	32	;' '
   311  0066  3441               	retlw	65	;'A'
   312  0067  3467               	retlw	103	;'g'
   313  0068  3461               	retlw	97	;'a'
   314  0069  3469               	retlw	105	;'i'
   315  006A  346E               	retlw	110	;'n'
   316  006B  3400               	retlw	0
   317  006C                     STR_2:	
   318  006C  3445               	retlw	69	;'E'
   319  006D  346E               	retlw	110	;'n'
   320  006E  3474               	retlw	116	;'t'
   321  006F  3465               	retlw	101	;'e'
   322  0070  3472               	retlw	114	;'r'
   323  0071  3420               	retlw	32	;' '
   324  0072  3474               	retlw	116	;'t'
   325  0073  3468               	retlw	104	;'h'
   326  0074  3465               	retlw	101	;'e'
   327  0075  3420               	retlw	32	;' '
   328  0076  344B               	retlw	75	;'K'
   329  0077  3465               	retlw	101	;'e'
   330  0078  3479               	retlw	121	;'y'
   331  0079  3400               	retlw	0
   332  007A                     STR_5:	
   333  007A  3444               	retlw	68	;'D'
   334  007B  346F               	retlw	111	;'o'
   335  007C  346F               	retlw	111	;'o'
   336  007D  3472               	retlw	114	;'r'
   337  007E  3420               	retlw	32	;' '
   338  007F  344F               	retlw	79	;'O'
   339  0080  3470               	retlw	112	;'p'
   340  0081  3465               	retlw	101	;'e'
   341  0082  346E               	retlw	110	;'n'
   342  0083  3465               	retlw	101	;'e'
   343  0084  3464               	retlw	100	;'d'
   344  0085  3400               	retlw	0
   345  0086                     STR_8:	
   346  0086  3450               	retlw	80	;'P'
   347  0087  3457               	retlw	87	;'W'
   348  0088  3420               	retlw	32	;' '
   349  0089  3452               	retlw	82	;'R'
   350  008A  3465               	retlw	101	;'e'
   351  008B  3473               	retlw	115	;'s'
   352  008C  3465               	retlw	101	;'e'
   353  008D  3474               	retlw	116	;'t'
   354  008E  3465               	retlw	101	;'e'
   355  008F  3464               	retlw	100	;'d'
   356  0090  3400               	retlw	0
   357  0091                     STR_13:	
   358  0091  3454               	retlw	84	;'T'
   359  0092  3472               	retlw	114	;'r'
   360  0093  3479               	retlw	121	;'y'
   361  0094  3420               	retlw	32	;' '
   362  0095  3441               	retlw	65	;'A'
   363  0096  3467               	retlw	103	;'g'
   364  0097  3461               	retlw	97	;'a'
   365  0098  3469               	retlw	105	;'i'
   366  0099  346E               	retlw	110	;'n'
   367  009A  3400               	retlw	0
   368  009B                     STR_9:	
   369  009B  3454               	retlw	84	;'T'
   370  009C  3468               	retlw	104	;'h'
   371  009D  3461               	retlw	97	;'a'
   372  009E  346E               	retlw	110	;'n'
   373  009F  346B               	retlw	107	;'k'
   374  00A0  3420               	retlw	32	;' '
   375  00A1  3459               	retlw	89	;'Y'
   376  00A2  346F               	retlw	111	;'o'
   377  00A3  3475               	retlw	117	;'u'
   378  00A4  3400               	retlw	0
   379  00A5                     STR_3:	
   380  00A5  3425               	retlw	37	;'%'
   381  00A6  3464               	retlw	100	;'d'
   382  00A7  3400               	retlw	0
   383  003E                     
   384                           ; #config settings
   385  0000                     
   386                           	psect	cinit
   387  07FC                     start_initialization:	
   388  07FC                     __initialization:	
   389  07FC                     end_of_initialization:	
   390                           ;End of C runtime variable initialization code
   391                           
   392  07FC                     __end_of__initialization:	
   393  07FC  0183               	clrf	3
   394  07FD  120A  118A  2C61   	ljmp	_main	;jump to C main() function
   395                           
   396                           	psect	cstackCOMMON
   397  0070                     __pcstackCOMMON:	
   398  0070                     ?_Lcd_Port:	
   399  0070                     ??_Lcd_Port:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_Lcd_Cmd:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_Lcd_Init:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ?_Lcd_Write_Char:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ?_Keypad_Init:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ??_Keypad_Init:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     ?_READ_SWITCHES:	
   418                           ; 1 bytes @ 0x0
   419                           
   420  0070                     ??_READ_SWITCHES:	
   421                           ; 1 bytes @ 0x0
   422                           
   423  0070                     ?_GetKey:	
   424                           ; 1 bytes @ 0x0
   425                           
   426  0070                     ?_Lock_Buz:	
   427                           ; 1 bytes @ 0x0
   428                           
   429  0070                     ??_Lock_Buz:	
   430                           ; 1 bytes @ 0x0
   431                           
   432  0070                     ?_main:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ?_Lcd_Clear:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?___lwdiv:	
   439                           ; 2 bytes @ 0x0
   440                           
   441  0070                     Lcd_Port@a:	
   442                           ; 2 bytes @ 0x0
   443                           
   444  0070                     ___lwdiv@divisor:	
   445                           ; 1 bytes @ 0x0
   446                           
   447                           
   448                           ; 2 bytes @ 0x0
   449  0070                     	ds	1
   450  0071                     ??_Lcd_Cmd:	
   451  0071                     ??_Lcd_Write_Char:	
   452                           ; 1 bytes @ 0x1
   453                           
   454                           
   455                           ; 1 bytes @ 0x1
   456  0071                     	ds	1
   457  0072                     Lcd_Write_Char@temp:	
   458  0072                     ___lwdiv@dividend:	
   459                           ; 1 bytes @ 0x2
   460                           
   461                           
   462                           ; 2 bytes @ 0x2
   463  0072                     	ds	1
   464  0073                     ??_GetKey:	
   465  0073                     Lcd_Cmd@a:	
   466                           ; 1 bytes @ 0x3
   467                           
   468  0073                     Lcd_Write_Char@y:	
   469                           ; 1 bytes @ 0x3
   470                           
   471                           
   472                           ; 1 bytes @ 0x3
   473  0073                     	ds	1
   474  0074                     ??_Lcd_Clear:	
   475  0074                     ?_Lcd_Set_Cursor:	
   476                           ; 1 bytes @ 0x4
   477                           
   478  0074                     ??_Lcd_Init:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0074                     ??___lwdiv:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     Lcd_Set_Cursor@b:	
   485                           ; 1 bytes @ 0x4
   486                           
   487  0074                     Lcd_Write_Char@a:	
   488                           ; 1 bytes @ 0x4
   489                           
   490  0074                     GetKey@key:	
   491                           ; 1 bytes @ 0x4
   492                           
   493                           
   494                           ; 1 bytes @ 0x4
   495  0074                     	ds	1
   496  0075                     ??_Lcd_Set_Cursor:	
   497  0075                     ?_Lcd_Write_String:	
   498                           ; 1 bytes @ 0x5
   499                           
   500  0075                     Lcd_Write_String@a:	
   501                           ; 1 bytes @ 0x5
   502                           
   503  0075                     ___lwdiv@quotient:	
   504                           ; 2 bytes @ 0x5
   505                           
   506                           
   507                           ; 2 bytes @ 0x5
   508  0075                     	ds	2
   509  0077                     ??_Lcd_Write_String:	
   510  0077                     Lcd_Set_Cursor@a:	
   511                           ; 1 bytes @ 0x7
   512                           
   513  0077                     ___lwdiv@counter:	
   514                           ; 1 bytes @ 0x7
   515                           
   516                           
   517                           ; 1 bytes @ 0x7
   518  0077                     	ds	1
   519  0078                     ?___lwmod:	
   520  0078                     Lcd_Set_Cursor@z:	
   521                           ; 2 bytes @ 0x8
   522                           
   523  0078                     ___lwmod@divisor:	
   524                           ; 1 bytes @ 0x8
   525                           
   526                           
   527                           ; 2 bytes @ 0x8
   528  0078                     	ds	1
   529  0079                     Lcd_Set_Cursor@y:	
   530                           
   531                           ; 1 bytes @ 0x9
   532  0079                     	ds	1
   533  007A                     Lcd_Set_Cursor@temp:	
   534  007A                     Lcd_Write_String@i:	
   535                           ; 1 bytes @ 0xA
   536                           
   537  007A                     ___lwmod@dividend:	
   538                           ; 2 bytes @ 0xA
   539                           
   540                           
   541                           ; 2 bytes @ 0xA
   542  007A                     	ds	2
   543  007C                     ??___lwmod:	
   544                           
   545                           ; 1 bytes @ 0xC
   546  007C                     	ds	1
   547  007D                     ___lwmod@counter:	
   548                           
   549                           ; 1 bytes @ 0xD
   550  007D                     	ds	1
   551                           
   552                           	psect	cstackBANK0
   553  0020                     __pcstackBANK0:	
   554  0020                     ?_sprintf:	
   555  0020                     sprintf@f:	
   556                           ; 2 bytes @ 0x0
   557                           
   558                           
   559                           ; 1 bytes @ 0x0
   560  0020                     	ds	3
   561  0023                     ??_sprintf:	
   562                           
   563                           ; 1 bytes @ 0x3
   564  0023                     	ds	3
   565  0026                     sprintf@ap:	
   566                           
   567                           ; 1 bytes @ 0x6
   568  0026                     	ds	1
   569  0027                     sprintf@flag:	
   570                           
   571                           ; 1 bytes @ 0x7
   572  0027                     	ds	1
   573  0028                     sprintf@prec:	
   574                           
   575                           ; 1 bytes @ 0x8
   576  0028                     	ds	1
   577  0029                     sprintf@val:	
   578                           
   579                           ; 2 bytes @ 0x9
   580  0029                     	ds	2
   581  002B                     sprintf@sp:	
   582                           
   583                           ; 1 bytes @ 0xB
   584  002B                     	ds	1
   585  002C                     sprintf@c:	
   586                           
   587                           ; 1 bytes @ 0xC
   588  002C                     	ds	1
   589  002D                     ??_main:	
   590                           
   591                           ; 1 bytes @ 0xD
   592  002D                     	ds	3
   593  0030                     main@Nes:	
   594                           
   595                           ; 12 bytes @ 0x10
   596  0030                     	ds	12
   597  003C                     main@Nes1:	
   598                           
   599                           ; 12 bytes @ 0x1C
   600  003C                     	ds	12
   601  0048                     main@r1:	
   602                           
   603                           ; 1 bytes @ 0x28
   604  0048                     	ds	1
   605  0049                     main@r2:	
   606                           
   607                           ; 1 bytes @ 0x29
   608  0049                     	ds	1
   609  004A                     main@r3:	
   610                           
   611                           ; 1 bytes @ 0x2A
   612  004A                     	ds	1
   613  004B                     main@r4:	
   614                           
   615                           ; 1 bytes @ 0x2B
   616  004B                     	ds	1
   617  004C                     main@p1:	
   618                           
   619                           ; 1 bytes @ 0x2C
   620  004C                     	ds	1
   621  004D                     main@p2:	
   622                           
   623                           ; 1 bytes @ 0x2D
   624  004D                     	ds	1
   625  004E                     main@p3:	
   626                           
   627                           ; 1 bytes @ 0x2E
   628  004E                     	ds	1
   629  004F                     main@p4:	
   630                           
   631                           ; 1 bytes @ 0x2F
   632  004F                     	ds	1
   633  0050                     main@i:	
   634                           
   635                           ; 2 bytes @ 0x30
   636  0050                     	ds	2
   637  0052                     main@rs11:	
   638                           
   639                           ; 1 bytes @ 0x32
   640  0052                     	ds	1
   641  0053                     main@rs21:	
   642                           
   643                           ; 1 bytes @ 0x33
   644  0053                     	ds	1
   645  0054                     main@rs31:	
   646                           
   647                           ; 1 bytes @ 0x34
   648  0054                     	ds	1
   649  0055                     main@rs41:	
   650                           
   651                           ; 1 bytes @ 0x35
   652  0055                     	ds	1
   653  0056                     main@R1:	
   654                           
   655                           ; 2 bytes @ 0x36
   656  0056                     	ds	2
   657  0058                     main@rs12:	
   658                           
   659                           ; 1 bytes @ 0x38
   660  0058                     	ds	1
   661  0059                     main@rs22:	
   662                           
   663                           ; 1 bytes @ 0x39
   664  0059                     	ds	1
   665  005A                     main@rs32:	
   666                           
   667                           ; 1 bytes @ 0x3A
   668  005A                     	ds	1
   669  005B                     main@rs42:	
   670                           
   671                           ; 1 bytes @ 0x3B
   672  005B                     	ds	1
   673  005C                     main@Key1:	
   674                           
   675                           ; 1 bytes @ 0x3C
   676  005C                     	ds	1
   677  005D                     main@Key2:	
   678                           
   679                           ; 1 bytes @ 0x3D
   680  005D                     	ds	1
   681  005E                     main@Key3:	
   682                           
   683                           ; 1 bytes @ 0x3E
   684  005E                     	ds	1
   685  005F                     main@Key4:	
   686                           
   687                           ; 1 bytes @ 0x3F
   688  005F                     	ds	1
   689  0060                     main@R:	
   690                           
   691                           ; 2 bytes @ 0x40
   692  0060                     	ds	2
   693                           
   694                           	psect	maintext
   695  0461                     __pmaintext:	
   696 ;;
   697 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   698 ;;
   699 ;; *************** function _main *****************
   700 ;; Defined at:
   701 ;;		line 81 in file "lcd.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  i               2   48[BANK0 ] int 
   706 ;;  Nes1           12   28[BANK0 ] unsigned char [12]
   707 ;;  Nes            12   16[BANK0 ] unsigned char [12]
   708 ;;  R               2   64[BANK0 ] int 
   709 ;;  R1              2   54[BANK0 ] int 
   710 ;;  Key4            1   63[BANK0 ] unsigned char 
   711 ;;  Key3            1   62[BANK0 ] unsigned char 
   712 ;;  Key2            1   61[BANK0 ] unsigned char 
   713 ;;  Key1            1   60[BANK0 ] unsigned char 
   714 ;;  rs42            1   59[BANK0 ] unsigned char 
   715 ;;  rs32            1   58[BANK0 ] unsigned char 
   716 ;;  rs22            1   57[BANK0 ] unsigned char 
   717 ;;  rs12            1   56[BANK0 ] unsigned char 
   718 ;;  rs41            1   53[BANK0 ] unsigned char 
   719 ;;  rs31            1   52[BANK0 ] unsigned char 
   720 ;;  rs21            1   51[BANK0 ] unsigned char 
   721 ;;  rs11            1   50[BANK0 ] unsigned char 
   722 ;;  p4              1   47[BANK0 ] unsigned char 
   723 ;;  p3              1   46[BANK0 ] unsigned char 
   724 ;;  p2              1   45[BANK0 ] unsigned char 
   725 ;;  p1              1   44[BANK0 ] unsigned char 
   726 ;;  r4              1   43[BANK0 ] unsigned char 
   727 ;;  r3              1   42[BANK0 ] unsigned char 
   728 ;;  r2              1   41[BANK0 ] unsigned char 
   729 ;;  r1              1   40[BANK0 ] unsigned char 
   730 ;; Return value:  Size  Location     Type
   731 ;;                  1    wreg      void 
   732 ;; Registers used:
   733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   734 ;; Tracked objects:
   735 ;;		On entry : B00/0
   736 ;;		On exit  : 0/0
   737 ;;		Unchanged: 0/0
   738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   739 ;;      Params:         0       0       0       0       0
   740 ;;      Locals:         0      50       0       0       0
   741 ;;      Temps:          0       3       0       0       0
   742 ;;      Totals:         0      53       0       0       0
   743 ;;Total ram usage:       53 bytes
   744 ;; Hardware stack levels required when called:    3
   745 ;; This function calls:
   746 ;;		_GetKey
   747 ;;		_Keypad_Init
   748 ;;		_Lcd_Clear
   749 ;;		_Lcd_Init
   750 ;;		_Lcd_Set_Cursor
   751 ;;		_Lcd_Write_Char
   752 ;;		_Lcd_Write_String
   753 ;;		_Lock_Buz
   754 ;;		_sprintf
   755 ;; This function is called by:
   756 ;;		Startup code after reset
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           
   761                           ;psect for function _main
   762  0461                     _main:	
   763                           
   764                           ;lcd.c: 83: 
   765                           
   766                           ;incstack = 0
   767                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   768  0461  1683               	bsf	3,5	;RP0=1, select bank1
   769  0462  1303               	bcf	3,6	;RP1=0, select bank1
   770  0463  0188               	clrf	8	;volatile
   771                           
   772                           ;lcd.c: 86:         Lcd_Write_Char(Key1);
   773  0464  1283               	bcf	3,5	;RP0=0, select bank0
   774  0465  1303               	bcf	3,6	;RP1=0, select bank0
   775  0466  01E0               	clrf	main@R
   776  0467  01E1               	clrf	main@R+1
   777                           
   778                           ;lcd.c: 87: 
   779  0468  301E               	movlw	30
   780  0469  00D6               	movwf	main@R1
   781  046A  3000               	movlw	0
   782  046B  00D7               	movwf	main@R1+1
   783                           
   784                           ;lcd.c: 96:         Key4=GetKey();
   785  046C  3031               	movlw	49
   786  046D  00AD               	movwf	??_main
   787  046E  082D               	movf	??_main,w
   788  046F  00CC               	movwf	main@p1
   789  0470  3032               	movlw	50
   790  0471  00AD               	movwf	??_main
   791  0472  082D               	movf	??_main,w
   792  0473  00CD               	movwf	main@p2
   793  0474  3033               	movlw	51
   794  0475  00AD               	movwf	??_main
   795  0476  082D               	movf	??_main,w
   796  0477  00CE               	movwf	main@p3
   797  0478  3034               	movlw	52
   798  0479  00AD               	movwf	??_main
   799  047A  082D               	movf	??_main,w
   800  047B  00CF               	movwf	main@p4
   801                           
   802                           ;lcd.c: 97:         Lcd_Set_Cursor(2,4);
   803  047C  302A               	movlw	42
   804  047D  00AD               	movwf	??_main
   805  047E  082D               	movf	??_main,w
   806  047F  00C8               	movwf	main@r1
   807  0480  3030               	movlw	48
   808  0481  00AD               	movwf	??_main
   809  0482  082D               	movf	??_main,w
   810  0483  00C9               	movwf	main@r2
   811  0484  3030               	movlw	48
   812  0485  00AD               	movwf	??_main
   813  0486  082D               	movf	??_main,w
   814  0487  00CA               	movwf	main@r3
   815  0488  3023               	movlw	35
   816  0489  00AD               	movwf	??_main
   817  048A  082D               	movf	??_main,w
   818  048B  00CB               	movwf	main@r4
   819                           
   820                           ;lcd.c: 99: ;lcd.c: 100: ;lcd.c: 102:         _delay((unsigned long)((1000)*(16000000/40
      +                          00.0)));
   821  048C  120A  118A  21B0  120A  118A  	fcall	_Lcd_Init
   822                           
   823                           ;lcd.c: 103: 
   824  0491  120A  158A  2780  120A  118A  	fcall	_Keypad_Init
   825                           
   826                           ;lcd.c: 104:         if (p1==Key1 & p2==Key2 & p3==Key3 & p4==Key4 )
   827  0496  01F4               	clrf	Lcd_Set_Cursor@b
   828  0497  0AF4               	incf	Lcd_Set_Cursor@b,f
   829  0498  3001               	movlw	1
   830  0499  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
   831                           
   832                           ;lcd.c: 105:             {
   833  049E  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   834  049F  00F5               	movwf	Lcd_Write_String@a
   835  04A0  3080               	movlw	128
   836  04A1  00F6               	movwf	Lcd_Write_String@a+1
   837  04A2  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
   838                           
   839                           ;lcd.c: 106: 
   840  04A7  3029               	movlw	41
   841  04A8  1283               	bcf	3,5	;RP0=0, select bank0
   842  04A9  1303               	bcf	3,6	;RP1=0, select bank0
   843  04AA  00AF               	movwf	??_main+2
   844  04AB  3096               	movlw	150
   845  04AC  00AE               	movwf	??_main+1
   846  04AD  307E               	movlw	126
   847  04AE  00AD               	movwf	??_main
   848  04AF                     u1437:	
   849  04AF  0BAD               	decfsz	??_main,f
   850  04B0  2CAF               	goto	u1437
   851  04B1  0BAE               	decfsz	??_main+1,f
   852  04B2  2CAF               	goto	u1437
   853  04B3  0BAF               	decfsz	??_main+2,f
   854  04B4  2CAF               	goto	u1437
   855  04B5  0000               	nop
   856                           
   857                           ;lcd.c: 107:                 Lcd_Clear();
   858  04B6  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
   859  04BB  2E83               	goto	l1768
   860  04BC                     l1810:	
   861  04BC  084D               	movf	main@p2,w
   862  04BD  065D               	xorwf	main@Key2,w
   863  04BE  1D03               	skipz
   864  04BF  2F4B               	goto	l1826
   865  04C0  084E               	movf	main@p3,w
   866  04C1  065E               	xorwf	main@Key3,w
   867  04C2  1D03               	skipz
   868  04C3  2F4B               	goto	l1826
   869  04C4  084F               	movf	main@p4,w
   870  04C5  065F               	xorwf	main@Key4,w
   871  04C6  1D03               	skipz
   872  04C7  2F4B               	goto	l1826
   873                           
   874                           ;lcd.c: 140: ;lcd.c: 142:                 Lcd_Set_Cursor(2,4);
   875  04C8  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
   876                           
   877                           ;lcd.c: 143:                 Lcd_Write_Char(rs41);
   878  04CD  01F4               	clrf	Lcd_Set_Cursor@b
   879  04CE  0AF4               	incf	Lcd_Set_Cursor@b,f
   880  04CF  3001               	movlw	1
   881  04D0  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
   882                           
   883                           ;lcd.c: 144:                 _delay((unsigned long)((1000)*(16000000/4000.0)));
   884  04D5  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   885  04D6  00F5               	movwf	Lcd_Write_String@a
   886  04D7  3080               	movlw	128
   887  04D8  00F6               	movwf	Lcd_Write_String@a+1
   888  04D9  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
   889                           
   890                           ;lcd.c: 145: 
   891  04DE  01F4               	clrf	Lcd_Set_Cursor@b
   892  04DF  0AF4               	incf	Lcd_Set_Cursor@b,f
   893  04E0  3002               	movlw	2
   894  04E1  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
   895                           
   896                           ;lcd.c: 146: 
   897  04E6  3068               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   898  04E7  00F5               	movwf	Lcd_Write_String@a
   899  04E8  3080               	movlw	128
   900  04E9  00F6               	movwf	Lcd_Write_String@a+1
   901  04EA  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
   902                           
   903                           ;lcd.c: 152:                 Lcd_Set_Cursor(2,1);
   904  04EF  120A  118A  220B  120A  118A  	fcall	_Lock_Buz
   905  04F4                     l1824:	
   906                           
   907                           ;lcd.c: 154: 
   908  04F4  1283               	bcf	3,5	;RP0=0, select bank0
   909  04F5  1303               	bcf	3,6	;RP1=0, select bank0
   910  04F6  01E0               	clrf	main@R
   911  04F7  01E1               	clrf	main@R+1
   912                           
   913                           ;lcd.c: 156:                 Lcd_Set_Cursor(2,2);
   914  04F8  2E83               	goto	l1768
   915  04F9                     l1828:	
   916  04F9  0849               	movf	main@r2,w
   917  04FA  065D               	xorwf	main@Key2,w
   918  04FB  1D03               	skipz
   919  04FC  2F4F               	goto	l1918
   920  04FD  084A               	movf	main@r3,w
   921  04FE  065E               	xorwf	main@Key3,w
   922  04FF  1D03               	skipz
   923  0500  2F4F               	goto	l1918
   924  0501  084B               	movf	main@r4,w
   925  0502  065F               	xorwf	main@Key4,w
   926  0503  1D03               	skipz
   927  0504  2F4F               	goto	l1918
   928                           
   929                           ;lcd.c: 158: ;lcd.c: 160:                 Lcd_Set_Cursor(2,3);
   930  0505  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
   931                           
   932                           ;lcd.c: 161:                 Lcd_Write_Char(rs32);
   933  050A  01F4               	clrf	Lcd_Set_Cursor@b
   934  050B  0AF4               	incf	Lcd_Set_Cursor@b,f
   935  050C  3001               	movlw	1
   936  050D  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
   937                           
   938                           ;lcd.c: 162: 
   939  0512  303C               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   940  0513  00F5               	movwf	Lcd_Write_String@a
   941  0514  3080               	movlw	128
   942  0515  00F6               	movwf	Lcd_Write_String@a+1
   943  0516  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
   944                           
   945                           ;lcd.c: 164:                 Lcd_Set_Cursor(2,4);
   946  051B  120A  158A  278A  120A  118A  	fcall	_GetKey
   947  0520  1283               	bcf	3,5	;RP0=0, select bank0
   948  0521  1303               	bcf	3,6	;RP1=0, select bank0
   949  0522  00AD               	movwf	??_main
   950  0523  082D               	movf	??_main,w
   951  0524  00D2               	movwf	main@rs11
   952                           
   953                           ;lcd.c: 165:                 Lcd_Write_Char(rs42);
   954  0525  01F4               	clrf	Lcd_Set_Cursor@b
   955  0526  0AF4               	incf	Lcd_Set_Cursor@b,f
   956  0527  3002               	movlw	2
   957  0528  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
   958                           
   959                           ;lcd.c: 166:                 _delay((unsigned long)((1000)*(16000000/4000.0)));
   960  052D  1283               	bcf	3,5	;RP0=0, select bank0
   961  052E  1303               	bcf	3,6	;RP1=0, select bank0
   962  052F  0852               	movf	main@rs11,w
   963  0530  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
   964                           
   965                           ;lcd.c: 168:                 if ( rs11==rs12 & rs21==rs22 & rs31==rs32 &rs41==rs42 )
   966  0535  120A  158A  278A  120A  118A  	fcall	_GetKey
   967  053A  1283               	bcf	3,5	;RP0=0, select bank0
   968  053B  1303               	bcf	3,6	;RP1=0, select bank0
   969  053C  00AD               	movwf	??_main
   970  053D  082D               	movf	??_main,w
   971  053E  00D3               	movwf	main@rs21
   972                           
   973                           ;lcd.c: 169:                 {
   974  053F  3002               	movlw	2
   975  0540  00AD               	movwf	??_main
   976  0541  082D               	movf	??_main,w
   977  0542  00F4               	movwf	Lcd_Set_Cursor@b
   978  0543  3002               	movlw	2
   979  0544  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
   980                           
   981                           ;lcd.c: 170:                     p1=rs12;
   982  0549  1283               	bcf	3,5	;RP0=0, select bank0
   983  054A  1303               	bcf	3,6	;RP1=0, select bank0
   984  054B  0853               	movf	main@rs21,w
   985  054C  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
   986                           
   987                           ;lcd.c: 172:                     p3=rs32;
   988  0551  120A  158A  278A  120A  118A  	fcall	_GetKey
   989  0556  1283               	bcf	3,5	;RP0=0, select bank0
   990  0557  1303               	bcf	3,6	;RP1=0, select bank0
   991  0558  00AD               	movwf	??_main
   992  0559  082D               	movf	??_main,w
   993  055A  00D4               	movwf	main@rs31
   994                           
   995                           ;lcd.c: 173:                     p4=rs42;
   996  055B  3003               	movlw	3
   997  055C  00AD               	movwf	??_main
   998  055D  082D               	movf	??_main,w
   999  055E  00F4               	movwf	Lcd_Set_Cursor@b
  1000  055F  3002               	movlw	2
  1001  0560  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1002                           
  1003                           ;lcd.c: 174: 
  1004  0565  1283               	bcf	3,5	;RP0=0, select bank0
  1005  0566  1303               	bcf	3,6	;RP1=0, select bank0
  1006  0567  0854               	movf	main@rs31,w
  1007  0568  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1008                           
  1009                           ;lcd.c: 176:                     Lcd_Set_Cursor(1,1);
  1010  056D  120A  158A  278A  120A  118A  	fcall	_GetKey
  1011  0572  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0573  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0574  00AD               	movwf	??_main
  1014  0575  082D               	movf	??_main,w
  1015  0576  00D5               	movwf	main@rs41
  1016                           
  1017                           ;lcd.c: 177:                     Lcd_Write_String("PW Reseted");
  1018  0577  3004               	movlw	4
  1019  0578  00AD               	movwf	??_main
  1020  0579  082D               	movf	??_main,w
  1021  057A  00F4               	movwf	Lcd_Set_Cursor@b
  1022  057B  3002               	movlw	2
  1023  057C  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1024                           
  1025                           ;lcd.c: 178: 
  1026  0581  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0582  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0583  0855               	movf	main@rs41,w
  1029  0584  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1030                           
  1031                           ;lcd.c: 179: 
  1032  0589  3015               	movlw	21
  1033  058A  1283               	bcf	3,5	;RP0=0, select bank0
  1034  058B  1303               	bcf	3,6	;RP1=0, select bank0
  1035  058C  00AF               	movwf	??_main+2
  1036  058D  304B               	movlw	75
  1037  058E  00AE               	movwf	??_main+1
  1038  058F  30BD               	movlw	189
  1039  0590  00AD               	movwf	??_main
  1040  0591                     u1457:	
  1041  0591  0BAD               	decfsz	??_main,f
  1042  0592  2D91               	goto	u1457
  1043  0593  0BAE               	decfsz	??_main+1,f
  1044  0594  2D91               	goto	u1457
  1045  0595  0BAF               	decfsz	??_main+2,f
  1046  0596  2D91               	goto	u1457
  1047  0597  2D98               	nop2
  1048                           
  1049                           ;lcd.c: 182: 
  1050  0598  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
  1051                           
  1052                           ;lcd.c: 183:                     _delay((unsigned long)((2000)*(16000000/4000.0)));
  1053  059D  01F4               	clrf	Lcd_Set_Cursor@b
  1054  059E  0AF4               	incf	Lcd_Set_Cursor@b,f
  1055  059F  3001               	movlw	1
  1056  05A0  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1057                           
  1058                           ;lcd.c: 184: 
  1059  05A5  304B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1060  05A6  00F5               	movwf	Lcd_Write_String@a
  1061  05A7  3080               	movlw	128
  1062  05A8  00F6               	movwf	Lcd_Write_String@a+1
  1063  05A9  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1064                           
  1065                           ;lcd.c: 186:                 }
  1066  05AE  120A  158A  278A  120A  118A  	fcall	_GetKey
  1067  05B3  1283               	bcf	3,5	;RP0=0, select bank0
  1068  05B4  1303               	bcf	3,6	;RP1=0, select bank0
  1069  05B5  00AD               	movwf	??_main
  1070  05B6  082D               	movf	??_main,w
  1071  05B7  00D8               	movwf	main@rs12
  1072                           
  1073                           ;lcd.c: 187:             }
  1074  05B8  01F4               	clrf	Lcd_Set_Cursor@b
  1075  05B9  0AF4               	incf	Lcd_Set_Cursor@b,f
  1076  05BA  3002               	movlw	2
  1077  05BB  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1078                           
  1079                           ;lcd.c: 188:         else if ( R==5 )
  1080  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  1081  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  1082  05C2  0858               	movf	main@rs12,w
  1083  05C3  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1084                           
  1085                           ;lcd.c: 190:             Lcd_Clear();
  1086  05C8  120A  158A  278A  120A  118A  	fcall	_GetKey
  1087  05CD  1283               	bcf	3,5	;RP0=0, select bank0
  1088  05CE  1303               	bcf	3,6	;RP1=0, select bank0
  1089  05CF  00AD               	movwf	??_main
  1090  05D0  082D               	movf	??_main,w
  1091  05D1  00D9               	movwf	main@rs22
  1092                           
  1093                           ;lcd.c: 191:             Lcd_Set_Cursor(1,1);
  1094  05D2  3002               	movlw	2
  1095  05D3  00AD               	movwf	??_main
  1096  05D4  082D               	movf	??_main,w
  1097  05D5  00F4               	movwf	Lcd_Set_Cursor@b
  1098  05D6  3002               	movlw	2
  1099  05D7  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1100                           
  1101                           ;lcd.c: 192:             Lcd_Write_String("Wait For 30 Sec");
  1102  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  1103  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  1104  05DE  0859               	movf	main@rs22,w
  1105  05DF  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1106                           
  1107                           ;lcd.c: 194:             TRISC=0x00;
  1108  05E4  120A  158A  278A  120A  118A  	fcall	_GetKey
  1109  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1110  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1111  05EB  00AD               	movwf	??_main
  1112  05EC  082D               	movf	??_main,w
  1113  05ED  00DA               	movwf	main@rs32
  1114                           
  1115                           ;lcd.c: 195: 
  1116  05EE  3003               	movlw	3
  1117  05EF  00AD               	movwf	??_main
  1118  05F0  082D               	movf	??_main,w
  1119  05F1  00F4               	movwf	Lcd_Set_Cursor@b
  1120  05F2  3002               	movlw	2
  1121  05F3  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1122                           
  1123                           ;lcd.c: 196:             for (int i=0;i<=30;i++)
  1124  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  1125  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  1126  05FA  085A               	movf	main@rs32,w
  1127  05FB  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1128                           
  1129                           ;lcd.c: 198:                 sprintf(Nes1 , "%d", R1 );
  1130  0600  120A  158A  278A  120A  118A  	fcall	_GetKey
  1131  0605  1283               	bcf	3,5	;RP0=0, select bank0
  1132  0606  1303               	bcf	3,6	;RP1=0, select bank0
  1133  0607  00AD               	movwf	??_main
  1134  0608  082D               	movf	??_main,w
  1135  0609  00DB               	movwf	main@rs42
  1136                           
  1137                           ;lcd.c: 199:                 Lcd_Clear();
  1138  060A  3004               	movlw	4
  1139  060B  00AD               	movwf	??_main
  1140  060C  082D               	movf	??_main,w
  1141  060D  00F4               	movwf	Lcd_Set_Cursor@b
  1142  060E  3002               	movlw	2
  1143  060F  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1144                           
  1145                           ;lcd.c: 200:                 Lcd_Set_Cursor(1,1);
  1146  0614  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0615  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0616  085B               	movf	main@rs42,w
  1149  0617  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1150                           
  1151                           ;lcd.c: 201:                 Lcd_Write_String("Wait For 30 Sec");
  1152  061C  3015               	movlw	21
  1153  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1154  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1155  061F  00AF               	movwf	??_main+2
  1156  0620  304B               	movlw	75
  1157  0621  00AE               	movwf	??_main+1
  1158  0622  30BD               	movlw	189
  1159  0623  00AD               	movwf	??_main
  1160  0624                     u1467:	
  1161  0624  0BAD               	decfsz	??_main,f
  1162  0625  2E24               	goto	u1467
  1163  0626  0BAE               	decfsz	??_main+1,f
  1164  0627  2E24               	goto	u1467
  1165  0628  0BAF               	decfsz	??_main+2,f
  1166  0629  2E24               	goto	u1467
  1167  062A  2E2B               	nop2
  1168                           
  1169                           ;lcd.c: 203:                 Lcd_Write_String(Nes1);
  1170  062B  1283               	bcf	3,5	;RP0=0, select bank0
  1171  062C  1303               	bcf	3,6	;RP1=0, select bank0
  1172  062D  0852               	movf	main@rs11,w
  1173  062E  0658               	xorwf	main@rs12,w
  1174  062F  1D03               	skipz
  1175  0630  2E83               	goto	l1768
  1176  0631  0853               	movf	main@rs21,w
  1177  0632  0659               	xorwf	main@rs22,w
  1178  0633  1D03               	skipz
  1179  0634  2E83               	goto	l1768
  1180  0635  0854               	movf	main@rs31,w
  1181  0636  065A               	xorwf	main@rs32,w
  1182  0637  1D03               	skipz
  1183  0638  2E83               	goto	l1768
  1184  0639  0855               	movf	main@rs41,w
  1185  063A  065B               	xorwf	main@rs42,w
  1186  063B  1D03               	skipz
  1187  063C  2E83               	goto	l1768
  1188                           
  1189                           ;lcd.c: 204:                 PORTCbits.RC4=1;;lcd.c: 205:                 R1=R1-1;
  1190  063D  0858               	movf	main@rs12,w
  1191  063E  00AD               	movwf	??_main
  1192  063F  082D               	movf	??_main,w
  1193  0640  00CC               	movwf	main@p1
  1194                           
  1195                           ;lcd.c: 206:                 _delay((unsigned long)((500)*(16000000/4000.0)));
  1196  0641  0859               	movf	main@rs22,w
  1197  0642  00AD               	movwf	??_main
  1198  0643  082D               	movf	??_main,w
  1199  0644  00CD               	movwf	main@p2
  1200                           
  1201                           ;lcd.c: 207:                  PORTCbits.RC4=0;
  1202  0645  085A               	movf	main@rs32,w
  1203  0646  00AD               	movwf	??_main
  1204  0647  082D               	movf	??_main,w
  1205  0648  00CE               	movwf	main@p3
  1206                           
  1207                           ;lcd.c: 208:                 _delay((unsigned long)((500)*(16000000/4000.0)));
  1208  0649  085B               	movf	main@rs42,w
  1209  064A  00AD               	movwf	??_main
  1210  064B  082D               	movf	??_main,w
  1211  064C  00CF               	movwf	main@p4
  1212                           
  1213                           ;lcd.c: 210: 
  1214  064D  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
  1215                           
  1216                           ;lcd.c: 211:             }
  1217  0652  01F4               	clrf	Lcd_Set_Cursor@b
  1218  0653  0AF4               	incf	Lcd_Set_Cursor@b,f
  1219  0654  3001               	movlw	1
  1220  0655  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1221                           
  1222                           ;lcd.c: 212:             R1=30;
  1223  065A  3074               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1224  065B  00F5               	movwf	Lcd_Write_String@a
  1225  065C  3080               	movlw	128
  1226  065D  00F6               	movwf	Lcd_Write_String@a+1
  1227  065E  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1228                           
  1229                           ;lcd.c: 215: 
  1230  0663  01F4               	clrf	Lcd_Set_Cursor@b
  1231  0664  0AF4               	incf	Lcd_Set_Cursor@b,f
  1232  0665  3002               	movlw	2
  1233  0666  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1234                           
  1235                           ;lcd.c: 216: 
  1236  066B  3089               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1237  066C                     L1:	
  1238  066C  00F5               	movwf	Lcd_Write_String@a
  1239  066D  3080               	movlw	128
  1240  066E  00F6               	movwf	Lcd_Write_String@a+1
  1241  066F  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1242                           
  1243                           ;lcd.c: 218:         else
  1244  0674  3029               	movlw	41
  1245  0675  1283               	bcf	3,5	;RP0=0, select bank0
  1246  0676  1303               	bcf	3,6	;RP1=0, select bank0
  1247  0677  00AF               	movwf	??_main+2
  1248  0678  3096               	movlw	150
  1249  0679  00AE               	movwf	??_main+1
  1250  067A  307E               	movlw	126
  1251  067B  00AD               	movwf	??_main
  1252  067C                     u1477:	
  1253  067C  0BAD               	decfsz	??_main,f
  1254  067D  2E7C               	goto	u1477
  1255  067E  0BAE               	decfsz	??_main+1,f
  1256  067F  2E7C               	goto	u1477
  1257  0680  0BAF               	decfsz	??_main+2,f
  1258  0681  2E7C               	goto	u1477
  1259  0682  0000               	nop
  1260  0683                     l1768:	
  1261                           
  1262                           ;lcd.c: 109:                 Lcd_Write_String("Correct Password");;lcd.c: 110:          
      +                                 Lcd_Set_Cursor(2,1);
  1263  0683  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
  1264                           
  1265                           ;lcd.c: 111:                 Lcd_Write_String("Door Opened");
  1266  0688  01F4               	clrf	Lcd_Set_Cursor@b
  1267  0689  0AF4               	incf	Lcd_Set_Cursor@b,f
  1268  068A  3001               	movlw	1
  1269  068B  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1270                           
  1271                           ;lcd.c: 112: 
  1272  0690  305A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1273  0691  00F5               	movwf	Lcd_Write_String@a
  1274  0692  3080               	movlw	128
  1275  0693  00F6               	movwf	Lcd_Write_String@a+1
  1276  0694  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1277                           
  1278                           ;lcd.c: 114: 
  1279  0699  3093               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1280  069A  1283               	bcf	3,5	;RP0=0, select bank0
  1281  069B  1303               	bcf	3,6	;RP1=0, select bank0
  1282  069C  00AD               	movwf	??_main
  1283  069D  082D               	movf	??_main,w
  1284  069E  00A0               	movwf	sprintf@f
  1285  069F  0861               	movf	main@R+1,w
  1286  06A0  00A2               	movwf	?_sprintf+2
  1287  06A1  0860               	movf	main@R,w
  1288  06A2  00A1               	movwf	?_sprintf+1
  1289  06A3  3030               	movlw	(low (main@Nes| 0))& (0+255)
  1290  06A4  120A  118A  2279  120A  118A  	fcall	_sprintf
  1291                           
  1292                           ;lcd.c: 115: 
  1293  06A9  300F               	movlw	15
  1294  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1295  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1296  06AC  00AD               	movwf	??_main
  1297  06AD  082D               	movf	??_main,w
  1298  06AE  00F4               	movwf	Lcd_Set_Cursor@b
  1299  06AF  3001               	movlw	1
  1300  06B0  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1301                           
  1302                           ;lcd.c: 116: 
  1303  06B5  3030               	movlw	(low (main@Nes| 0))& (0+255)
  1304  06B6  00F5               	movwf	Lcd_Write_String@a
  1305  06B7  3000               	movlw	0
  1306  06B8  00F6               	movwf	Lcd_Write_String@a+1
  1307  06B9  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1308                           
  1309                           ;lcd.c: 117:                 Lock_Buz();
  1310  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1311  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1312  06C0  0860               	movf	main@R,w
  1313  06C1  3E01               	addlw	1
  1314  06C2  00E0               	movwf	main@R
  1315  06C3  0861               	movf	main@R+1,w
  1316  06C4  1803               	skipnc
  1317  06C5  3E01               	addlw	1
  1318  06C6  3E00               	addlw	0
  1319  06C7  00E1               	movwf	main@R+1
  1320                           
  1321                           ;lcd.c: 119:                 R=0;
  1322  06C8  120A  158A  278A  120A  118A  	fcall	_GetKey
  1323  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1324  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  1325  06CF  00AD               	movwf	??_main
  1326  06D0  082D               	movf	??_main,w
  1327  06D1  00DC               	movwf	main@Key1
  1328                           
  1329                           ;lcd.c: 120: 
  1330  06D2  01F4               	clrf	Lcd_Set_Cursor@b
  1331  06D3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1332  06D4  3002               	movlw	2
  1333  06D5  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1334                           
  1335                           ;lcd.c: 121:             }
  1336  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  1337  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  1338  06DC  085C               	movf	main@Key1,w
  1339  06DD  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1340                           
  1341                           ;lcd.c: 123:             {
  1342  06E2  120A  158A  278A  120A  118A  	fcall	_GetKey
  1343  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  1344  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  1345  06E9  00AD               	movwf	??_main
  1346  06EA  082D               	movf	??_main,w
  1347  06EB  00DD               	movwf	main@Key2
  1348                           
  1349                           ;lcd.c: 124: 
  1350  06EC  3002               	movlw	2
  1351  06ED  00AD               	movwf	??_main
  1352  06EE  082D               	movf	??_main,w
  1353  06EF  00F4               	movwf	Lcd_Set_Cursor@b
  1354  06F0  3002               	movlw	2
  1355  06F1  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1356                           
  1357                           ;lcd.c: 125:                 Lcd_Clear();
  1358  06F6  1283               	bcf	3,5	;RP0=0, select bank0
  1359  06F7  1303               	bcf	3,6	;RP1=0, select bank0
  1360  06F8  085D               	movf	main@Key2,w
  1361  06F9  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1362                           
  1363                           ;lcd.c: 127:                 Lcd_Write_String("Reset Password");
  1364  06FE  120A  158A  278A  120A  118A  	fcall	_GetKey
  1365  0703  1283               	bcf	3,5	;RP0=0, select bank0
  1366  0704  1303               	bcf	3,6	;RP1=0, select bank0
  1367  0705  00AD               	movwf	??_main
  1368  0706  082D               	movf	??_main,w
  1369  0707  00DE               	movwf	main@Key3
  1370                           
  1371                           ;lcd.c: 128: 
  1372  0708  3003               	movlw	3
  1373  0709  00AD               	movwf	??_main
  1374  070A  082D               	movf	??_main,w
  1375  070B  00F4               	movwf	Lcd_Set_Cursor@b
  1376  070C  3002               	movlw	2
  1377  070D  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1378                           
  1379                           ;lcd.c: 129:                 rs11=GetKey();
  1380  0712  1283               	bcf	3,5	;RP0=0, select bank0
  1381  0713  1303               	bcf	3,6	;RP1=0, select bank0
  1382  0714  085E               	movf	main@Key3,w
  1383  0715  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1384                           
  1385                           ;lcd.c: 131:                 Lcd_Write_Char(rs11);
  1386  071A  120A  158A  278A  120A  118A  	fcall	_GetKey
  1387  071F  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0720  1303               	bcf	3,6	;RP1=0, select bank0
  1389  0721  00AD               	movwf	??_main
  1390  0722  082D               	movf	??_main,w
  1391  0723  00DF               	movwf	main@Key4
  1392                           
  1393                           ;lcd.c: 132: 
  1394  0724  3004               	movlw	4
  1395  0725  00AD               	movwf	??_main
  1396  0726  082D               	movf	??_main,w
  1397  0727  00F4               	movwf	Lcd_Set_Cursor@b
  1398  0728  3002               	movlw	2
  1399  0729  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1400                           
  1401                           ;lcd.c: 133:                 rs21=GetKey();
  1402  072E  1283               	bcf	3,5	;RP0=0, select bank0
  1403  072F  1303               	bcf	3,6	;RP1=0, select bank0
  1404  0730  085F               	movf	main@Key4,w
  1405  0731  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  1406                           
  1407                           ;lcd.c: 137:                 rs31=GetKey();
  1408  0736  3015               	movlw	21
  1409  0737  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0738  1303               	bcf	3,6	;RP1=0, select bank0
  1411  0739  00AF               	movwf	??_main+2
  1412  073A  304B               	movlw	75
  1413  073B  00AE               	movwf	??_main+1
  1414  073C  30BD               	movlw	189
  1415  073D  00AD               	movwf	??_main
  1416  073E                     u1447:	
  1417  073E  0BAD               	decfsz	??_main,f
  1418  073F  2F3E               	goto	u1447
  1419  0740  0BAE               	decfsz	??_main+1,f
  1420  0741  2F3E               	goto	u1447
  1421  0742  0BAF               	decfsz	??_main+2,f
  1422  0743  2F3E               	goto	u1447
  1423  0744  2F45               	nop2
  1424                           
  1425                           ;lcd.c: 139:                 Lcd_Write_Char(rs31);
  1426  0745  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0746  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0747  084C               	movf	main@p1,w
  1429  0748  065C               	xorwf	main@Key1,w
  1430  0749  1903               	btfsc	3,2
  1431  074A  2CBC               	goto	l1810
  1432  074B                     l1826:	
  1433  074B  0848               	movf	main@r1,w
  1434  074C  065C               	xorwf	main@Key1,w
  1435  074D  1903               	btfsc	3,2
  1436  074E  2CF9               	goto	l1828
  1437  074F                     l1918:	
  1438  074F  3005               	movlw	5
  1439  0750  0660               	xorwf	main@R,w
  1440  0751  0461               	iorwf	main@R+1,w
  1441  0752  1D03               	btfss	3,2
  1442  0753  2FED               	goto	l1960
  1443                           
  1444                           ;lcd.c: 224: ;lcd.c: 225:             }
  1445  0754  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
  1446                           
  1447                           ;lcd.c: 226: 
  1448  0759  01F4               	clrf	Lcd_Set_Cursor@b
  1449  075A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1450  075B  3001               	movlw	1
  1451  075C  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1452                           
  1453                           ;lcd.c: 227: 
  1454  0761  302C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1455  0762  00F5               	movwf	Lcd_Write_String@a
  1456  0763  3080               	movlw	128
  1457  0764  00F6               	movwf	Lcd_Write_String@a+1
  1458  0765  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1459                           
  1460                           ;lcd.c: 229: 
  1461  076A  1683               	bsf	3,5	;RP0=1, select bank1
  1462  076B  1303               	bcf	3,6	;RP1=0, select bank1
  1463  076C  0187               	clrf	7	;volatile
  1464  076D  1283               	bcf	3,5	;RP0=0, select bank0
  1465  076E  1303               	bcf	3,6	;RP1=0, select bank0
  1466  076F  01D0               	clrf	main@i
  1467  0770  01D1               	clrf	main@i+1
  1468  0771                     l1928:	
  1469  0771  0851               	movf	main@i+1,w
  1470  0772  3A80               	xorlw	128
  1471  0773  00FF               	movwf	127
  1472  0774  3080               	movlw	128
  1473  0775  027F               	subwf	127,w
  1474  0776  1D03               	skipz
  1475  0777  2F7A               	goto	u1425
  1476  0778  301F               	movlw	31
  1477  0779  0250               	subwf	main@i,w
  1478  077A                     u1425:	
  1479  077A  1803               	btfsc	3,0
  1480  077B  2FE6               	goto	l1956
  1481  077C  3093               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1482  077D  1283               	bcf	3,5	;RP0=0, select bank0
  1483  077E  1303               	bcf	3,6	;RP1=0, select bank0
  1484  077F  00AD               	movwf	??_main
  1485  0780  082D               	movf	??_main,w
  1486  0781  00A0               	movwf	sprintf@f
  1487  0782  0857               	movf	main@R1+1,w
  1488  0783  00A2               	movwf	?_sprintf+2
  1489  0784  0856               	movf	main@R1,w
  1490  0785  00A1               	movwf	?_sprintf+1
  1491  0786  303C               	movlw	(low (main@Nes1| 0))& (0+255)
  1492  0787  120A  118A  2279  120A  118A  	fcall	_sprintf
  1493  078C  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
  1494  0791  01F4               	clrf	Lcd_Set_Cursor@b
  1495  0792  0AF4               	incf	Lcd_Set_Cursor@b,f
  1496  0793  3001               	movlw	1
  1497  0794  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1498  0799  302C               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1499  079A  00F5               	movwf	Lcd_Write_String@a
  1500  079B  3080               	movlw	128
  1501  079C  00F6               	movwf	Lcd_Write_String@a+1
  1502  079D  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1503  07A2  01F4               	clrf	Lcd_Set_Cursor@b
  1504  07A3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1505  07A4  3002               	movlw	2
  1506  07A5  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1507  07AA  303C               	movlw	(low (main@Nes1| 0))& (0+255)
  1508  07AB  00F5               	movwf	Lcd_Write_String@a
  1509  07AC  3000               	movlw	0
  1510  07AD  00F6               	movwf	Lcd_Write_String@a+1
  1511  07AE  120A  118A  2129  120A  118A  	fcall	_Lcd_Write_String
  1512  07B3  1283               	bcf	3,5	;RP0=0, select bank0
  1513  07B4  1303               	bcf	3,6	;RP1=0, select bank0
  1514  07B5  1607               	bsf	7,4	;volatile
  1515  07B6  0856               	movf	main@R1,w
  1516  07B7  3EFF               	addlw	255
  1517  07B8  00D6               	movwf	main@R1
  1518  07B9  0857               	movf	main@R1+1,w
  1519  07BA  1803               	skipnc
  1520  07BB  3E01               	addlw	1
  1521  07BC  3EFF               	addlw	255
  1522  07BD  00D7               	movwf	main@R1+1
  1523  07BE  300B               	movlw	11
  1524  07BF  1283               	bcf	3,5	;RP0=0, select bank0
  1525  07C0  1303               	bcf	3,6	;RP1=0, select bank0
  1526  07C1  00AF               	movwf	??_main+2
  1527  07C2  3026               	movlw	38
  1528  07C3  00AE               	movwf	??_main+1
  1529  07C4  305D               	movlw	93
  1530  07C5  00AD               	movwf	??_main
  1531  07C6                     u1487:	
  1532  07C6  0BAD               	decfsz	??_main,f
  1533  07C7  2FC6               	goto	u1487
  1534  07C8  0BAE               	decfsz	??_main+1,f
  1535  07C9  2FC6               	goto	u1487
  1536  07CA  0BAF               	decfsz	??_main+2,f
  1537  07CB  2FC6               	goto	u1487
  1538  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  1539  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  1540  07CE  1207               	bcf	7,4	;volatile
  1541  07CF  300B               	movlw	11
  1542  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  1543  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  1544  07D2  00AF               	movwf	??_main+2
  1545  07D3  3026               	movlw	38
  1546  07D4  00AE               	movwf	??_main+1
  1547  07D5  305D               	movlw	93
  1548  07D6  00AD               	movwf	??_main
  1549  07D7                     u1497:	
  1550  07D7  0BAD               	decfsz	??_main,f
  1551  07D8  2FD7               	goto	u1497
  1552  07D9  0BAE               	decfsz	??_main+1,f
  1553  07DA  2FD7               	goto	u1497
  1554  07DB  0BAF               	decfsz	??_main+2,f
  1555  07DC  2FD7               	goto	u1497
  1556  07DD  3001               	movlw	1
  1557  07DE  1283               	bcf	3,5	;RP0=0, select bank0
  1558  07DF  1303               	bcf	3,6	;RP1=0, select bank0
  1559  07E0  07D0               	addwf	main@i,f
  1560  07E1  1803               	skipnc
  1561  07E2  0AD1               	incf	main@i+1,f
  1562  07E3  3000               	movlw	0
  1563  07E4  07D1               	addwf	main@i+1,f
  1564  07E5  2F71               	goto	l1928
  1565  07E6                     l1956:	
  1566  07E6  301E               	movlw	30
  1567  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  1568  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  1569  07E9  00D6               	movwf	main@R1
  1570  07EA  3000               	movlw	0
  1571  07EB  00D7               	movwf	main@R1+1
  1572  07EC  2CF4               	goto	l1824
  1573  07ED                     l1960:	
  1574  07ED  120A  118A  20AB  120A  118A  	fcall	_Lcd_Clear
  1575  07F2  01F4               	clrf	Lcd_Set_Cursor@b
  1576  07F3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1577  07F4  3001               	movlw	1
  1578  07F5  120A  118A  2166  120A  118A  	fcall	_Lcd_Set_Cursor
  1579  07FA  307F               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1580  07FB  2E6C               	goto	L1
  1581  07FC                     __end_of_main:	
  1582                           
  1583                           	psect	text1
  1584  0279                     __ptext1:	
  1585 ;; *************** function _sprintf *****************
  1586 ;; Defined at:
  1587 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  sp              1    wreg     PTR unsigned char 
  1590 ;;		 -> main@Nes1(12), main@Nes(12), 
  1591 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1592 ;;		 -> STR_11(3), STR_3(3), 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1595 ;;		 -> main@Nes1(12), main@Nes(12), 
  1596 ;;  tmpval          4    0        struct .
  1597 ;;  val             2    9[BANK0 ] unsigned int 
  1598 ;;  cp              2    0        PTR const unsigned char 
  1599 ;;  len             2    0        unsigned int 
  1600 ;;  c               1   12[BANK0 ] unsigned char 
  1601 ;;  prec            1    8[BANK0 ] char 
  1602 ;;  flag            1    7[BANK0 ] unsigned char 
  1603 ;;  ap              1    6[BANK0 ] PTR void [1]
  1604 ;;		 -> ?_sprintf(2), 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  2    0[BANK0 ] int 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1614 ;;      Params:         0       3       0       0       0
  1615 ;;      Locals:         0       7       0       0       0
  1616 ;;      Temps:          0       3       0       0       0
  1617 ;;      Totals:         0      13       0       0       0
  1618 ;;Total ram usage:       13 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    1
  1621 ;; This function calls:
  1622 ;;		___lwdiv
  1623 ;;		___lwmod
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _sprintf
  1631  0279                     _sprintf:	
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1635                           ;sprintf@sp stored from wreg
  1636  0279  1283               	bcf	3,5	;RP0=0, select bank0
  1637  027A  1303               	bcf	3,6	;RP1=0, select bank0
  1638  027B  00AB               	movwf	sprintf@sp
  1639                           
  1640                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
  1641  027C  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1642  027D  00A3               	movwf	??_sprintf
  1643  027E  0823               	movf	??_sprintf,w
  1644  027F  00A6               	movwf	sprintf@ap
  1645  0280                     l1714:	
  1646                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1647                           
  1648                           
  1649                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
  1650  0280  3001               	movlw	1
  1651  0281  07A0               	addwf	sprintf@f,f
  1652  0282  30FF               	movlw	-1
  1653  0283  0720               	addwf	sprintf@f,w
  1654  0284  0084               	movwf	4
  1655  0285  120A  118A  200D  120A  118A  	fcall	stringdir
  1656  028A  00A3               	movwf	??_sprintf
  1657  028B  0823               	movf	??_sprintf,w
  1658  028C  00AC               	movwf	sprintf@c
  1659  028D  082C               	movf	sprintf@c,w
  1660  028E  1903               	btfsc	3,2
  1661  028F  2B4C               	goto	l1716
  1662                           
  1663                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
  1664  0290  3025               	movlw	37
  1665  0291  062C               	xorwf	sprintf@c,w
  1666  0292  1903               	btfsc	3,2
  1667  0293  2AA0               	goto	l1670
  1668                           
  1669                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
  1670  0294  082C               	movf	sprintf@c,w
  1671  0295  00A3               	movwf	??_sprintf
  1672  0296  082B               	movf	sprintf@sp,w
  1673  0297  0084               	movwf	4
  1674  0298  0823               	movf	??_sprintf,w
  1675  0299  1383               	bcf	3,7	;select IRP bank0
  1676  029A  0080               	movwf	0
  1677  029B  3001               	movlw	1
  1678  029C  00A3               	movwf	??_sprintf
  1679  029D  0823               	movf	??_sprintf,w
  1680  029E  07AB               	addwf	sprintf@sp,f
  1681                           
  1682                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
  1683  029F  2A80               	goto	l1714
  1684  02A0                     l1670:	
  1685                           
  1686                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
  1687  02A0  01A7               	clrf	sprintf@flag
  1688                           
  1689                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 654:   swit
      +                          ch(c = *f++) {
  1690  02A1  3001               	movlw	1
  1691  02A2  07A0               	addwf	sprintf@f,f
  1692  02A3  30FF               	movlw	-1
  1693  02A4  0720               	addwf	sprintf@f,w
  1694  02A5  0084               	movwf	4
  1695  02A6  120A  118A  200D  120A  118A  	fcall	stringdir
  1696  02AB  00AC               	movwf	sprintf@c
  1697  02AC  00A3               	movwf	??_sprintf
  1698  02AD  01A4               	clrf	??_sprintf+1
  1699                           
  1700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1701                           ; Switch size 1, requested type "simple"
  1702                           ; Number of cases is 1, Range of values is 0 to 0
  1703                           ; switch strategies available:
  1704                           ; Name         Instructions Cycles
  1705                           ; simple_byte            4     3 (average)
  1706                           ; direct_byte           11     8 (fixed)
  1707                           ; jumptable            260     6 (fixed)
  1708                           ;	Chosen strategy is simple_byte
  1709  02AE  0824               	movf	??_sprintf+1,w
  1710  02AF  3A00               	xorlw	0	; case 0
  1711  02B0  1903               	skipnz
  1712  02B1  2AB3               	goto	l1986
  1713  02B2  2A80               	goto	l1714
  1714  02B3                     l1986:	
  1715                           
  1716                           ; Switch size 1, requested type "simple"
  1717                           ; Number of cases is 3, Range of values is 0 to 105
  1718                           ; switch strategies available:
  1719                           ; Name         Instructions Cycles
  1720                           ; simple_byte           10     6 (average)
  1721                           ; jumptable            260     6 (fixed)
  1722                           ;	Chosen strategy is simple_byte
  1723  02B3  0823               	movf	??_sprintf,w
  1724  02B4  3A00               	xorlw	0	; case 0
  1725  02B5  1903               	skipnz
  1726  02B6  2B4C               	goto	l1716
  1727  02B7  3A64               	xorlw	100	; case 100
  1728  02B8  1903               	skipnz
  1729  02B9  2ABE               	goto	l1676
  1730  02BA  3A0D               	xorlw	13	; case 105
  1731  02BB  1903               	skipnz
  1732  02BC  2ABE               	goto	l1676
  1733  02BD  2A80               	goto	l1714
  1734  02BE                     l1676:	
  1735                           
  1736                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1737  02BE  0826               	movf	sprintf@ap,w
  1738  02BF  0084               	movwf	4
  1739  02C0  1383               	bcf	3,7	;select IRP bank0
  1740  02C1  0800               	movf	0,w
  1741  02C2  00A9               	movwf	sprintf@val
  1742  02C3  0A84               	incf	4,f
  1743  02C4  0800               	movf	0,w
  1744  02C5  00AA               	movwf	sprintf@val+1
  1745  02C6  3002               	movlw	2
  1746  02C7  00A3               	movwf	??_sprintf
  1747  02C8  0823               	movf	??_sprintf,w
  1748  02C9  07A6               	addwf	sprintf@ap,f
  1749                           
  1750                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
  1751  02CA  1FAA               	btfss	sprintf@val+1,7
  1752  02CB  2AD5               	goto	l1686
  1753                           
  1754                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  1755  02CC  3003               	movlw	3
  1756  02CD  00A3               	movwf	??_sprintf
  1757  02CE  0823               	movf	??_sprintf,w
  1758  02CF  04A7               	iorwf	sprintf@flag,f
  1759                           
  1760                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  1761  02D0  09A9               	comf	sprintf@val,f
  1762  02D1  09AA               	comf	sprintf@val+1,f
  1763  02D2  0AA9               	incf	sprintf@val,f
  1764  02D3  1903               	skipnz
  1765  02D4  0AAA               	incf	sprintf@val+1,f
  1766  02D5                     l1686:	
  1767                           
  1768                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1285:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1769  02D5  01AC               	clrf	sprintf@c
  1770  02D6  0AAC               	incf	sprintf@c,f
  1771  02D7                     l1692:	
  1772                           
  1773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  1774  02D7  082C               	movf	sprintf@c,w
  1775  02D8  00A3               	movwf	??_sprintf
  1776  02D9  0723               	addwf	??_sprintf,w
  1777  02DA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1778  02DB  0084               	movwf	4
  1779  02DC  120A  118A  200D  120A  118A  	fcall	stringdir
  1780  02E1  00A4               	movwf	??_sprintf+1
  1781  02E2  120A  118A  200D  120A  118A  	fcall	stringdir
  1782  02E7  00A5               	movwf	??_sprintf+2
  1783  02E8  0825               	movf	??_sprintf+2,w
  1784  02E9  022A               	subwf	sprintf@val+1,w
  1785  02EA  1D03               	skipz
  1786  02EB  2AEE               	goto	u1245
  1787  02EC  0824               	movf	??_sprintf+1,w
  1788  02ED  0229               	subwf	sprintf@val,w
  1789  02EE                     u1245:	
  1790  02EE  1C03               	btfss	3,0
  1791  02EF  2AF8               	goto	l1698
  1792  02F0  3001               	movlw	1
  1793  02F1  00A3               	movwf	??_sprintf
  1794  02F2  0823               	movf	??_sprintf,w
  1795  02F3  07AC               	addwf	sprintf@c,f
  1796  02F4  3005               	movlw	5
  1797  02F5  062C               	xorwf	sprintf@c,w
  1798  02F6  1D03               	btfss	3,2
  1799  02F7  2AD7               	goto	l1692
  1800  02F8                     l1698:	
  1801                           
  1802                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  1803  02F8  0827               	movf	sprintf@flag,w
  1804  02F9  3903               	andlw	3
  1805  02FA  1903               	btfsc	3,2
  1806  02FB  2B07               	goto	l1704
  1807                           
  1808                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  1809  02FC  302D               	movlw	45
  1810  02FD  00A3               	movwf	??_sprintf
  1811  02FE  082B               	movf	sprintf@sp,w
  1812  02FF  0084               	movwf	4
  1813  0300  0823               	movf	??_sprintf,w
  1814  0301  1383               	bcf	3,7	;select IRP bank0
  1815  0302  0080               	movwf	0
  1816  0303  3001               	movlw	1
  1817  0304  00A3               	movwf	??_sprintf
  1818  0305  0823               	movf	??_sprintf,w
  1819  0306  07AB               	addwf	sprintf@sp,f
  1820  0307                     l1704:	
  1821                           
  1822                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1488:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1491:   prec 
      +                          = c;
  1823  0307  082C               	movf	sprintf@c,w
  1824  0308  00A3               	movwf	??_sprintf
  1825  0309  0823               	movf	??_sprintf,w
  1826  030A  00A8               	movwf	sprintf@prec
  1827  030B                     l1712:	
  1828                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1829                           
  1830                           
  1831                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1832  030B  30FF               	movlw	255
  1833  030C  00A3               	movwf	??_sprintf
  1834  030D  0823               	movf	??_sprintf,w
  1835  030E  07A8               	addwf	sprintf@prec,f
  1836  030F  0A28               	incf	sprintf@prec,w
  1837  0310  1903               	btfsc	3,2
  1838  0311  2A80               	goto	l1714
  1839                           
  1840                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  1841  0312  300A               	movlw	10
  1842  0313  00F8               	movwf	___lwmod@divisor
  1843  0314  3000               	movlw	0
  1844  0315  00F9               	movwf	___lwmod@divisor+1
  1845  0316  0828               	movf	sprintf@prec,w
  1846  0317  00A3               	movwf	??_sprintf
  1847  0318  0723               	addwf	??_sprintf,w
  1848  0319  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1849  031A  0084               	movwf	4
  1850  031B  120A  118A  200D  120A  118A  	fcall	stringdir
  1851  0320  00F0               	movwf	___lwdiv@divisor
  1852  0321  120A  118A  200D  120A  118A  	fcall	stringdir
  1853  0326  00F1               	movwf	___lwdiv@divisor+1
  1854  0327  082A               	movf	sprintf@val+1,w
  1855  0328  00F3               	movwf	___lwdiv@dividend+1
  1856  0329  0829               	movf	sprintf@val,w
  1857  032A  00F2               	movwf	___lwdiv@dividend
  1858  032B  120A  118A  20ED  120A  118A  	fcall	___lwdiv
  1859  0330  0871               	movf	?___lwdiv+1,w
  1860  0331  00FB               	movwf	___lwmod@dividend+1
  1861  0332  0870               	movf	?___lwdiv,w
  1862  0333  00FA               	movwf	___lwmod@dividend
  1863  0334  120A  158A  27CE  120A  118A  	fcall	___lwmod
  1864  0339  0878               	movf	?___lwmod,w
  1865  033A  3E30               	addlw	48
  1866  033B  1283               	bcf	3,5	;RP0=0, select bank0
  1867  033C  1303               	bcf	3,6	;RP1=0, select bank0
  1868  033D  00A4               	movwf	??_sprintf+1
  1869  033E  0824               	movf	??_sprintf+1,w
  1870  033F  00AC               	movwf	sprintf@c
  1871                           
  1872                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  1873  0340  082C               	movf	sprintf@c,w
  1874  0341  00A3               	movwf	??_sprintf
  1875  0342  082B               	movf	sprintf@sp,w
  1876  0343  0084               	movwf	4
  1877  0344  0823               	movf	??_sprintf,w
  1878  0345  1383               	bcf	3,7	;select IRP bank0
  1879  0346  0080               	movwf	0
  1880  0347  3001               	movlw	1
  1881  0348  00A3               	movwf	??_sprintf
  1882  0349  0823               	movf	??_sprintf,w
  1883  034A  07AB               	addwf	sprintf@sp,f
  1884  034B  2B0B               	goto	l1712
  1885  034C                     l1716:	
  1886                           
  1887                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  1888  034C  082B               	movf	sprintf@sp,w
  1889  034D  0084               	movwf	4
  1890  034E  1383               	bcf	3,7	;select IRP bank0
  1891  034F  0180               	clrf	0
  1892  0350  0008               	return
  1893  0351                     __end_of_sprintf:	
  1894                           
  1895                           	psect	text2
  1896  0FCE                     __ptext2:	
  1897 ;; *************** function ___lwmod *****************
  1898 ;; Defined at:
  1899 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1900 ;; Parameters:    Size  Location     Type
  1901 ;;  divisor         2    8[COMMON] unsigned int 
  1902 ;;  dividend        2   10[COMMON] unsigned int 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  counter         1   13[COMMON] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  2    8[COMMON] unsigned int 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1914 ;;      Params:         4       0       0       0       0
  1915 ;;      Locals:         1       0       0       0       0
  1916 ;;      Temps:          1       0       0       0       0
  1917 ;;      Totals:         6       0       0       0       0
  1918 ;;Total ram usage:        6 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; This function calls:
  1921 ;;		Nothing
  1922 ;; This function is called by:
  1923 ;;		_sprintf
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           
  1928                           ;psect for function ___lwmod
  1929  0FCE                     ___lwmod:	
  1930                           
  1931                           ;incstack = 0
  1932                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1933  0FCE  0878               	movf	___lwmod@divisor,w
  1934  0FCF  0479               	iorwf	___lwmod@divisor+1,w
  1935  0FD0  1903               	btfsc	3,2
  1936  0FD1  2FFB               	goto	l1560
  1937  0FD2  01FD               	clrf	___lwmod@counter
  1938  0FD3  0AFD               	incf	___lwmod@counter,f
  1939  0FD4                     l1550:	
  1940  0FD4  1BF9               	btfsc	___lwmod@divisor+1,7
  1941  0FD5  2FE2               	goto	l1552
  1942  0FD6  3001               	movlw	1
  1943  0FD7                     u1095:	
  1944  0FD7  1003               	clrc
  1945  0FD8  0DF8               	rlf	___lwmod@divisor,f
  1946  0FD9  0DF9               	rlf	___lwmod@divisor+1,f
  1947  0FDA  3EFF               	addlw	-1
  1948  0FDB  1D03               	skipz
  1949  0FDC  2FD7               	goto	u1095
  1950  0FDD  3001               	movlw	1
  1951  0FDE  00FC               	movwf	??___lwmod
  1952  0FDF  087C               	movf	??___lwmod,w
  1953  0FE0  07FD               	addwf	___lwmod@counter,f
  1954  0FE1  2FD4               	goto	l1550
  1955  0FE2                     l1552:	
  1956  0FE2  0879               	movf	___lwmod@divisor+1,w
  1957  0FE3  027B               	subwf	___lwmod@dividend+1,w
  1958  0FE4  1D03               	skipz
  1959  0FE5  2FE8               	goto	u1115
  1960  0FE6  0878               	movf	___lwmod@divisor,w
  1961  0FE7  027A               	subwf	___lwmod@dividend,w
  1962  0FE8                     u1115:	
  1963  0FE8  1C03               	skipc
  1964  0FE9  2FF0               	goto	l1556
  1965  0FEA  0878               	movf	___lwmod@divisor,w
  1966  0FEB  02FA               	subwf	___lwmod@dividend,f
  1967  0FEC  0879               	movf	___lwmod@divisor+1,w
  1968  0FED  1C03               	skipc
  1969  0FEE  03FB               	decf	___lwmod@dividend+1,f
  1970  0FEF  02FB               	subwf	___lwmod@dividend+1,f
  1971  0FF0                     l1556:	
  1972  0FF0  3001               	movlw	1
  1973  0FF1                     u1125:	
  1974  0FF1  1003               	clrc
  1975  0FF2  0CF9               	rrf	___lwmod@divisor+1,f
  1976  0FF3  0CF8               	rrf	___lwmod@divisor,f
  1977  0FF4  3EFF               	addlw	-1
  1978  0FF5  1D03               	skipz
  1979  0FF6  2FF1               	goto	u1125
  1980  0FF7  3001               	movlw	1
  1981  0FF8  02FD               	subwf	___lwmod@counter,f
  1982  0FF9  1D03               	btfss	3,2
  1983  0FFA  2FE2               	goto	l1552
  1984  0FFB                     l1560:	
  1985  0FFB  087B               	movf	___lwmod@dividend+1,w
  1986  0FFC  00F9               	movwf	?___lwmod+1
  1987  0FFD  087A               	movf	___lwmod@dividend,w
  1988  0FFE  00F8               	movwf	?___lwmod
  1989  0FFF  0008               	return
  1990  1000                     __end_of___lwmod:	
  1991                           
  1992                           	psect	text3
  1993  00ED                     __ptext3:	
  1994 ;; *************** function ___lwdiv *****************
  1995 ;; Defined at:
  1996 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  divisor         2    0[COMMON] unsigned int 
  1999 ;;  dividend        2    2[COMMON] unsigned int 
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  quotient        2    5[COMMON] unsigned int 
  2002 ;;  counter         1    7[COMMON] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  2    0[COMMON] unsigned int 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2012 ;;      Params:         4       0       0       0       0
  2013 ;;      Locals:         3       0       0       0       0
  2014 ;;      Temps:          1       0       0       0       0
  2015 ;;      Totals:         8       0       0       0       0
  2016 ;;Total ram usage:        8 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_sprintf
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           
  2026                           ;psect for function ___lwdiv
  2027  00ED                     ___lwdiv:	
  2028                           
  2029                           ;incstack = 0
  2030                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2031  00ED  01F5               	clrf	___lwdiv@quotient
  2032  00EE  01F6               	clrf	___lwdiv@quotient+1
  2033  00EF  0870               	movf	___lwdiv@divisor,w
  2034  00F0  0471               	iorwf	___lwdiv@divisor+1,w
  2035  00F1  1903               	btfsc	3,2
  2036  00F2  2924               	goto	l1538
  2037  00F3  01F7               	clrf	___lwdiv@counter
  2038  00F4  0AF7               	incf	___lwdiv@counter,f
  2039  00F5                     l1526:	
  2040  00F5  1BF1               	btfsc	___lwdiv@divisor+1,7
  2041  00F6  2903               	goto	l1528
  2042  00F7  3001               	movlw	1
  2043  00F8                     u1025:	
  2044  00F8  1003               	clrc
  2045  00F9  0DF0               	rlf	___lwdiv@divisor,f
  2046  00FA  0DF1               	rlf	___lwdiv@divisor+1,f
  2047  00FB  3EFF               	addlw	-1
  2048  00FC  1D03               	skipz
  2049  00FD  28F8               	goto	u1025
  2050  00FE  3001               	movlw	1
  2051  00FF  00F4               	movwf	??___lwdiv
  2052  0100  0874               	movf	??___lwdiv,w
  2053  0101  07F7               	addwf	___lwdiv@counter,f
  2054  0102  28F5               	goto	l1526
  2055  0103                     l1528:	
  2056  0103  3001               	movlw	1
  2057  0104                     u1045:	
  2058  0104  1003               	clrc
  2059  0105  0DF5               	rlf	___lwdiv@quotient,f
  2060  0106  0DF6               	rlf	___lwdiv@quotient+1,f
  2061  0107  3EFF               	addlw	-1
  2062  0108  1D03               	skipz
  2063  0109  2904               	goto	u1045
  2064  010A  0871               	movf	___lwdiv@divisor+1,w
  2065  010B  0273               	subwf	___lwdiv@dividend+1,w
  2066  010C  1D03               	skipz
  2067  010D  2910               	goto	u1055
  2068  010E  0870               	movf	___lwdiv@divisor,w
  2069  010F  0272               	subwf	___lwdiv@dividend,w
  2070  0110                     u1055:	
  2071  0110  1C03               	skipc
  2072  0111  2919               	goto	l1534
  2073  0112  0870               	movf	___lwdiv@divisor,w
  2074  0113  02F2               	subwf	___lwdiv@dividend,f
  2075  0114  0871               	movf	___lwdiv@divisor+1,w
  2076  0115  1C03               	skipc
  2077  0116  03F3               	decf	___lwdiv@dividend+1,f
  2078  0117  02F3               	subwf	___lwdiv@dividend+1,f
  2079  0118  1475               	bsf	___lwdiv@quotient,0
  2080  0119                     l1534:	
  2081  0119  3001               	movlw	1
  2082  011A                     u1065:	
  2083  011A  1003               	clrc
  2084  011B  0CF1               	rrf	___lwdiv@divisor+1,f
  2085  011C  0CF0               	rrf	___lwdiv@divisor,f
  2086  011D  3EFF               	addlw	-1
  2087  011E  1D03               	skipz
  2088  011F  291A               	goto	u1065
  2089  0120  3001               	movlw	1
  2090  0121  02F7               	subwf	___lwdiv@counter,f
  2091  0122  1D03               	btfss	3,2
  2092  0123  2903               	goto	l1528
  2093  0124                     l1538:	
  2094  0124  0876               	movf	___lwdiv@quotient+1,w
  2095  0125  00F1               	movwf	?___lwdiv+1
  2096  0126  0875               	movf	___lwdiv@quotient,w
  2097  0127  00F0               	movwf	?___lwdiv
  2098  0128  0008               	return
  2099  0129                     __end_of___lwdiv:	
  2100                           
  2101                           	psect	text4
  2102  020B                     __ptext4:	
  2103 ;; *************** function _Lock_Buz *****************
  2104 ;; Defined at:
  2105 ;;		line 37 in file "lcd.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0
  2121 ;;      Temps:          3       0       0       0       0
  2122 ;;      Totals:         3       0       0       0       0
  2123 ;;Total ram usage:        3 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           
  2133                           ;psect for function _Lock_Buz
  2134  020B                     _Lock_Buz:	
  2135                           
  2136                           ;lcd.c: 39:      PORTCbits.RC3=1;
  2137                           
  2138                           ;incstack = 0
  2139                           ; Regs used in _Lock_Buz: [wreg+status,2]
  2140  020B  1683               	bsf	3,5	;RP0=1, select bank1
  2141  020C  1303               	bcf	3,6	;RP1=0, select bank1
  2142  020D  0187               	clrf	7	;volatile
  2143                           
  2144                           ;lcd.c: 40:     _delay((unsigned long)((1000)*(16000000/4000.0)));
  2145  020E  1283               	bcf	3,5	;RP0=0, select bank0
  2146  020F  1303               	bcf	3,6	;RP1=0, select bank0
  2147  0210  1507               	bsf	7,2	;volatile
  2148                           
  2149                           ;lcd.c: 41:     PORTCbits.RC3=0;
  2150  0211  1587               	bsf	7,3	;volatile
  2151                           
  2152                           ;lcd.c: 42: 
  2153  0212  1607               	bsf	7,4	;volatile
  2154                           
  2155                           ;lcd.c: 43: }
  2156  0213  300B               	movlw	11
  2157  0214  00F2               	movwf	??_Lock_Buz+2
  2158  0215  3026               	movlw	38
  2159  0216  00F1               	movwf	??_Lock_Buz+1
  2160  0217  305D               	movlw	93
  2161  0218  00F0               	movwf	??_Lock_Buz
  2162  0219                     u1507:	
  2163  0219  0BF0               	decfsz	??_Lock_Buz,f
  2164  021A  2A19               	goto	u1507
  2165  021B  0BF1               	decfsz	??_Lock_Buz+1,f
  2166  021C  2A19               	goto	u1507
  2167  021D  0BF2               	decfsz	??_Lock_Buz+2,f
  2168  021E  2A19               	goto	u1507
  2169  021F  2A20               	nop2
  2170                           
  2171                           ;lcd.c: 44: 
  2172  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2173  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2174  0222  1187               	bcf	7,3	;volatile
  2175                           
  2176                           ;lcd.c: 45: 
  2177  0223  1207               	bcf	7,4	;volatile
  2178                           
  2179                           ;lcd.c: 46: void main(void)
  2180  0224  300B               	movlw	11
  2181  0225  00F2               	movwf	??_Lock_Buz+2
  2182  0226  3026               	movlw	38
  2183  0227  00F1               	movwf	??_Lock_Buz+1
  2184  0228  305D               	movlw	93
  2185  0229  00F0               	movwf	??_Lock_Buz
  2186  022A                     u1517:	
  2187  022A  0BF0               	decfsz	??_Lock_Buz,f
  2188  022B  2A2A               	goto	u1517
  2189  022C  0BF1               	decfsz	??_Lock_Buz+1,f
  2190  022D  2A2A               	goto	u1517
  2191  022E  0BF2               	decfsz	??_Lock_Buz+2,f
  2192  022F  2A2A               	goto	u1517
  2193  0230  2A31               	nop2
  2194                           
  2195                           ;lcd.c: 47: {
  2196  0231  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0232  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0233  1587               	bsf	7,3	;volatile
  2199                           
  2200                           ;lcd.c: 48:     TRISD=0x00;
  2201  0234  1607               	bsf	7,4	;volatile
  2202                           
  2203                           ;lcd.c: 49: 
  2204  0235  300B               	movlw	11
  2205  0236  00F2               	movwf	??_Lock_Buz+2
  2206  0237  3026               	movlw	38
  2207  0238  00F1               	movwf	??_Lock_Buz+1
  2208  0239  305D               	movlw	93
  2209  023A  00F0               	movwf	??_Lock_Buz
  2210  023B                     u1527:	
  2211  023B  0BF0               	decfsz	??_Lock_Buz,f
  2212  023C  2A3B               	goto	u1527
  2213  023D  0BF1               	decfsz	??_Lock_Buz+1,f
  2214  023E  2A3B               	goto	u1527
  2215  023F  0BF2               	decfsz	??_Lock_Buz+2,f
  2216  0240  2A3B               	goto	u1527
  2217  0241  2A42               	nop2
  2218                           
  2219                           ;lcd.c: 50: 
  2220  0242  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0243  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0244  1187               	bcf	7,3	;volatile
  2223                           
  2224                           ;lcd.c: 51:     int R=0;
  2225  0245  1207               	bcf	7,4	;volatile
  2226                           
  2227                           ;lcd.c: 52:     int R1=30;
  2228  0246  300B               	movlw	11
  2229  0247  00F2               	movwf	??_Lock_Buz+2
  2230  0248  3026               	movlw	38
  2231  0249  00F1               	movwf	??_Lock_Buz+1
  2232  024A  305D               	movlw	93
  2233  024B  00F0               	movwf	??_Lock_Buz
  2234  024C                     u1537:	
  2235  024C  0BF0               	decfsz	??_Lock_Buz,f
  2236  024D  2A4C               	goto	u1537
  2237  024E  0BF1               	decfsz	??_Lock_Buz+1,f
  2238  024F  2A4C               	goto	u1537
  2239  0250  0BF2               	decfsz	??_Lock_Buz+2,f
  2240  0251  2A4C               	goto	u1537
  2241  0252  2A53               	nop2
  2242                           
  2243                           ;lcd.c: 53:     char Nes[12];
  2244  0253  1283               	bcf	3,5	;RP0=0, select bank0
  2245  0254  1303               	bcf	3,6	;RP1=0, select bank0
  2246  0255  1587               	bsf	7,3	;volatile
  2247                           
  2248                           ;lcd.c: 54:     char Nes1[12];
  2249  0256  1607               	bsf	7,4	;volatile
  2250                           
  2251                           ;lcd.c: 55: 
  2252  0257  300B               	movlw	11
  2253  0258  00F2               	movwf	??_Lock_Buz+2
  2254  0259  3026               	movlw	38
  2255  025A  00F1               	movwf	??_Lock_Buz+1
  2256  025B  305D               	movlw	93
  2257  025C  00F0               	movwf	??_Lock_Buz
  2258  025D                     u1547:	
  2259  025D  0BF0               	decfsz	??_Lock_Buz,f
  2260  025E  2A5D               	goto	u1547
  2261  025F  0BF1               	decfsz	??_Lock_Buz+1,f
  2262  0260  2A5D               	goto	u1547
  2263  0261  0BF2               	decfsz	??_Lock_Buz+2,f
  2264  0262  2A5D               	goto	u1547
  2265  0263  2A64               	nop2
  2266                           
  2267                           ;lcd.c: 56:     char Key1='n1';
  2268  0264  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0265  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0266  1187               	bcf	7,3	;volatile
  2271                           
  2272                           ;lcd.c: 57:     char Key2='n2';
  2273  0267  1207               	bcf	7,4	;volatile
  2274                           
  2275                           ;lcd.c: 58:     char Key3='n3';
  2276  0268  303D               	movlw	61
  2277  0269  00F2               	movwf	??_Lock_Buz+2
  2278  026A  30E1               	movlw	225
  2279  026B  00F1               	movwf	??_Lock_Buz+1
  2280  026C  303F               	movlw	63
  2281  026D  00F0               	movwf	??_Lock_Buz
  2282  026E                     u1557:	
  2283  026E  0BF0               	decfsz	??_Lock_Buz,f
  2284  026F  2A6E               	goto	u1557
  2285  0270  0BF1               	decfsz	??_Lock_Buz+1,f
  2286  0271  2A6E               	goto	u1557
  2287  0272  0BF2               	decfsz	??_Lock_Buz+2,f
  2288  0273  2A6E               	goto	u1557
  2289  0274  2A75               	nop2
  2290                           
  2291                           ;lcd.c: 59:     char Key4='n4';
  2292  0275  1283               	bcf	3,5	;RP0=0, select bank0
  2293  0276  1303               	bcf	3,6	;RP1=0, select bank0
  2294  0277  1107               	bcf	7,2	;volatile
  2295  0278  0008               	return
  2296  0279                     __end_of_Lock_Buz:	
  2297                           
  2298                           	psect	text5
  2299  0129                     __ptext5:	
  2300 ;; *************** function _Lcd_Write_String *****************
  2301 ;; Defined at:
  2302 ;;		line 98 in file "./lcd.h"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;  a               2    5[COMMON] PTR unsigned char 
  2305 ;;		 -> STR_13(10), STR_12(16), main@Nes1(12), STR_10(16), 
  2306 ;;		 -> STR_9(10), STR_8(11), STR_7(15), STR_6(15), 
  2307 ;;		 -> STR_5(12), STR_4(17), main@Nes(12), STR_2(14), 
  2308 ;;		 -> STR_1(16), 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  i               2   10[COMMON] int 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2320 ;;      Params:         2       0       0       0       0
  2321 ;;      Locals:         2       0       0       0       0
  2322 ;;      Temps:          3       0       0       0       0
  2323 ;;      Totals:         7       0       0       0       0
  2324 ;;Total ram usage:        7 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    2
  2327 ;; This function calls:
  2328 ;;		_Lcd_Write_Char
  2329 ;; This function is called by:
  2330 ;;		_main
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           
  2335                           ;psect for function _Lcd_Write_String
  2336  0129                     _Lcd_Write_String:	
  2337                           
  2338                           ;./lcd.h: 98: void Lcd_Write_String(char *a);./lcd.h: 99: {;./lcd.h: 100:  int i;;./lcd.
      +                          h: 101:  for(i=0;a[i]!='\0';i++)
  2339                           
  2340                           ;incstack = 0
  2341                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2342  0129  01FA               	clrf	Lcd_Write_String@i
  2343  012A  01FB               	clrf	Lcd_Write_String@i+1
  2344  012B                     l1602:	
  2345  012B  087A               	movf	Lcd_Write_String@i,w
  2346  012C  0775               	addwf	Lcd_Write_String@a,w
  2347  012D  00F8               	movwf	??_Lcd_Write_String+1
  2348  012E  0876               	movf	Lcd_Write_String@a+1,w
  2349  012F  00F7               	movwf	??_Lcd_Write_String
  2350  0130  1803               	skipnc
  2351  0131  0AF7               	incf	??_Lcd_Write_String,f
  2352  0132  1BFA               	btfsc	Lcd_Write_String@i,7
  2353  0133  03F7               	decf	??_Lcd_Write_String,f
  2354  0134  0877               	movf	??_Lcd_Write_String,w
  2355  0135  00F9               	movwf	??_Lcd_Write_String+2
  2356  0136  0879               	movf	??_Lcd_Write_String+2,w
  2357  0137  1283               	bcf	3,5	;RP0=0, select bank0
  2358  0138  1303               	bcf	3,6	;RP1=0, select bank0
  2359  0139  00FF               	movwf	127
  2360  013A  0878               	movf	??_Lcd_Write_String+1,w
  2361  013B  0084               	movwf	4
  2362  013C  120A  118A  2003  120A  118A  	fcall	stringtab
  2363  0141  3A00               	xorlw	0
  2364  0142  1903               	btfsc	3,2
  2365  0143  0008               	return
  2366                           
  2367                           ;./lcd.h: 102:     Lcd_Write_Char(a[i]);
  2368  0144  087A               	movf	Lcd_Write_String@i,w
  2369  0145  0775               	addwf	Lcd_Write_String@a,w
  2370  0146  00F8               	movwf	??_Lcd_Write_String+1
  2371  0147  0876               	movf	Lcd_Write_String@a+1,w
  2372  0148  00F7               	movwf	??_Lcd_Write_String
  2373  0149  1803               	skipnc
  2374  014A  0AF7               	incf	??_Lcd_Write_String,f
  2375  014B  1BFA               	btfsc	Lcd_Write_String@i,7
  2376  014C  03F7               	decf	??_Lcd_Write_String,f
  2377  014D  0877               	movf	??_Lcd_Write_String,w
  2378  014E  00F9               	movwf	??_Lcd_Write_String+2
  2379  014F  0879               	movf	??_Lcd_Write_String+2,w
  2380  0150  1283               	bcf	3,5	;RP0=0, select bank0
  2381  0151  1303               	bcf	3,6	;RP1=0, select bank0
  2382  0152  00FF               	movwf	127
  2383  0153  0878               	movf	??_Lcd_Write_String+1,w
  2384  0154  0084               	movwf	4
  2385  0155  120A  118A  2003  120A  118A  	fcall	stringtab
  2386  015A  120A  118A  20B6  120A  118A  	fcall	_Lcd_Write_Char
  2387  015F  3001               	movlw	1
  2388  0160  07FA               	addwf	Lcd_Write_String@i,f
  2389  0161  1803               	skipnc
  2390  0162  0AFB               	incf	Lcd_Write_String@i+1,f
  2391  0163  3000               	movlw	0
  2392  0164  07FB               	addwf	Lcd_Write_String@i+1,f
  2393  0165  292B               	goto	l1602
  2394  0166                     __end_of_Lcd_Write_String:	
  2395                           
  2396                           	psect	text6
  2397  00B6                     __ptext6:	
  2398 ;; *************** function _Lcd_Write_Char *****************
  2399 ;; Defined at:
  2400 ;;		line 82 in file "./lcd.h"
  2401 ;; Parameters:    Size  Location     Type
  2402 ;;  a               1    wreg     unsigned char 
  2403 ;; Auto vars:     Size  Location     Type
  2404 ;;  a               1    4[COMMON] unsigned char 
  2405 ;;  y               1    3[COMMON] unsigned char 
  2406 ;;  temp            1    2[COMMON] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  1    wreg      void 
  2409 ;; Registers used:
  2410 ;;		wreg, status,2, status,0, pclath, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2416 ;;      Params:         0       0       0       0       0
  2417 ;;      Locals:         3       0       0       0       0
  2418 ;;      Temps:          1       0       0       0       0
  2419 ;;      Totals:         4       0       0       0       0
  2420 ;;Total ram usage:        4 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    1
  2423 ;; This function calls:
  2424 ;;		_Lcd_Port
  2425 ;; This function is called by:
  2426 ;;		_Lcd_Write_String
  2427 ;;		_main
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           
  2432                           ;psect for function _Lcd_Write_Char
  2433  00B6                     _Lcd_Write_Char:	
  2434                           
  2435                           ;incstack = 0
  2436                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2437                           ;Lcd_Write_Char@a stored from wreg
  2438  00B6  00F4               	movwf	Lcd_Write_Char@a
  2439                           
  2440                           ;./lcd.h: 82: void Lcd_Write_Char(char a);./lcd.h: 83: {;./lcd.h: 84:    char temp,y;;./
      +                          lcd.h: 85:    temp = a&0x0F;
  2441  00B7  0874               	movf	Lcd_Write_Char@a,w
  2442  00B8  390F               	andlw	15
  2443  00B9  00F1               	movwf	??_Lcd_Write_Char
  2444  00BA  0871               	movf	??_Lcd_Write_Char,w
  2445  00BB  00F2               	movwf	Lcd_Write_Char@temp
  2446                           
  2447                           ;./lcd.h: 86:    y = a&0xF0;
  2448  00BC  0874               	movf	Lcd_Write_Char@a,w
  2449  00BD  39F0               	andlw	240
  2450  00BE  00F1               	movwf	??_Lcd_Write_Char
  2451  00BF  0871               	movf	??_Lcd_Write_Char,w
  2452  00C0  00F3               	movwf	Lcd_Write_Char@y
  2453                           
  2454                           ;./lcd.h: 87:    RD2 = 1;
  2455  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  2456  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  2457  00C3  1508               	bsf	8,2	;volatile
  2458                           
  2459                           ;./lcd.h: 88:    Lcd_Port(y>>4);
  2460  00C4  0873               	movf	Lcd_Write_Char@y,w
  2461  00C5  00F1               	movwf	??_Lcd_Write_Char
  2462  00C6  3004               	movlw	4
  2463  00C7                     u765:	
  2464  00C7  1003               	clrc
  2465  00C8  0CF1               	rrf	??_Lcd_Write_Char,f
  2466  00C9  3EFF               	addlw	-1
  2467  00CA  1D03               	skipz
  2468  00CB  28C7               	goto	u765
  2469  00CC  0871               	movf	??_Lcd_Write_Char,w
  2470  00CD  120A  158A  279A  120A  118A  	fcall	_Lcd_Port
  2471                           
  2472                           ;./lcd.h: 89:    RD3 = 1;
  2473  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  2474  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  2475  00D4  1588               	bsf	8,3	;volatile
  2476                           
  2477                           ;./lcd.h: 90:    _delay((unsigned long)((40)*(16000000/4000000.0)));
  2478  00D5  3035               	movlw	53
  2479  00D6  00F1               	movwf	??_Lcd_Write_Char
  2480  00D7                     u1567:	
  2481  00D7  0BF1               	decfsz	??_Lcd_Write_Char,f
  2482  00D8  28D7               	goto	u1567
  2483                           
  2484                           ;./lcd.h: 91:    RD3 = 0;
  2485  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2486  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  2487  00DB  1188               	bcf	8,3	;volatile
  2488                           
  2489                           ;./lcd.h: 92:    Lcd_Port(temp);
  2490  00DC  0872               	movf	Lcd_Write_Char@temp,w
  2491  00DD  120A  158A  279A  120A  118A  	fcall	_Lcd_Port
  2492                           
  2493                           ;./lcd.h: 93:    RD3 = 1;
  2494  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  2495  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  2496  00E4  1588               	bsf	8,3	;volatile
  2497                           
  2498                           ;./lcd.h: 94:    _delay((unsigned long)((40)*(16000000/4000000.0)));
  2499  00E5  3035               	movlw	53
  2500  00E6  00F1               	movwf	??_Lcd_Write_Char
  2501  00E7                     u1577:	
  2502  00E7  0BF1               	decfsz	??_Lcd_Write_Char,f
  2503  00E8  28E7               	goto	u1577
  2504                           
  2505                           ;./lcd.h: 95:    RD3 = 0;
  2506  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  2507  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  2508  00EB  1188               	bcf	8,3	;volatile
  2509  00EC  0008               	return
  2510  00ED                     __end_of_Lcd_Write_Char:	
  2511                           
  2512                           	psect	text7
  2513  0166                     __ptext7:	
  2514 ;; *************** function _Lcd_Set_Cursor *****************
  2515 ;; Defined at:
  2516 ;;		line 42 in file "./lcd.h"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  a               1    wreg     unsigned char 
  2519 ;;  b               1    4[COMMON] unsigned char 
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  a               1    7[COMMON] unsigned char 
  2522 ;;  temp            1   10[COMMON] unsigned char 
  2523 ;;  y               1    9[COMMON] unsigned char 
  2524 ;;  z               1    8[COMMON] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, pclath, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2534 ;;      Params:         1       0       0       0       0
  2535 ;;      Locals:         4       0       0       0       0
  2536 ;;      Temps:          2       0       0       0       0
  2537 ;;      Totals:         7       0       0       0       0
  2538 ;;Total ram usage:        7 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    2
  2541 ;; This function calls:
  2542 ;;		_Lcd_Cmd
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           
  2549                           ;psect for function _Lcd_Set_Cursor
  2550  0166                     _Lcd_Set_Cursor:	
  2551                           
  2552                           ;incstack = 0
  2553                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2554                           ;Lcd_Set_Cursor@a stored from wreg
  2555  0166  00F7               	movwf	Lcd_Set_Cursor@a
  2556                           
  2557                           ;./lcd.h: 42: void Lcd_Set_Cursor(char a, char b);./lcd.h: 43: {;./lcd.h: 44:  char temp
      +                          ,z,y;;./lcd.h: 45:  if(a == 1)
  2558  0167  0377               	decf	Lcd_Set_Cursor@a,w
  2559  0168  1D03               	btfss	3,2
  2560  0169  298B               	goto	l1576
  2561                           
  2562                           ;./lcd.h: 46:  {;./lcd.h: 47:    temp = 0x80 + b - 1;
  2563  016A  0874               	movf	Lcd_Set_Cursor@b,w
  2564  016B  3E7F               	addlw	127
  2565  016C  00F5               	movwf	??_Lcd_Set_Cursor
  2566  016D  0875               	movf	??_Lcd_Set_Cursor,w
  2567  016E  00FA               	movwf	Lcd_Set_Cursor@temp
  2568                           
  2569                           ;./lcd.h: 48:   z = temp>>4;
  2570  016F  087A               	movf	Lcd_Set_Cursor@temp,w
  2571  0170  00F5               	movwf	??_Lcd_Set_Cursor
  2572  0171  3004               	movlw	4
  2573  0172                     u1155:	
  2574  0172  1003               	clrc
  2575  0173  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2576  0174  3EFF               	addlw	-1
  2577  0175  1D03               	skipz
  2578  0176  2972               	goto	u1155
  2579  0177  0875               	movf	??_Lcd_Set_Cursor,w
  2580  0178  00F6               	movwf	??_Lcd_Set_Cursor+1
  2581  0179  0876               	movf	??_Lcd_Set_Cursor+1,w
  2582  017A  00F8               	movwf	Lcd_Set_Cursor@z
  2583                           
  2584                           ;./lcd.h: 49:   y = temp & 0x0F;
  2585  017B  087A               	movf	Lcd_Set_Cursor@temp,w
  2586  017C  390F               	andlw	15
  2587  017D  00F5               	movwf	??_Lcd_Set_Cursor
  2588  017E  0875               	movf	??_Lcd_Set_Cursor,w
  2589  017F  00F9               	movwf	Lcd_Set_Cursor@y
  2590                           
  2591                           ;./lcd.h: 50:   Lcd_Cmd(z);
  2592  0180  0878               	movf	Lcd_Set_Cursor@z,w
  2593  0181  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2594                           
  2595                           ;./lcd.h: 51:   Lcd_Cmd(y);
  2596  0186  0879               	movf	Lcd_Set_Cursor@y,w
  2597  0187  120A  158A  27B4   	fcall	_Lcd_Cmd
  2598                           
  2599                           ;./lcd.h: 52:  }
  2600  018A  0008               	return
  2601  018B                     l1576:	
  2602  018B  3002               	movlw	2
  2603  018C  0677               	xorwf	Lcd_Set_Cursor@a,w
  2604  018D  1D03               	btfss	3,2
  2605  018E  0008               	return
  2606                           
  2607                           ;./lcd.h: 54:  {;./lcd.h: 55:   temp = 0xC0 + b - 1;
  2608  018F  0874               	movf	Lcd_Set_Cursor@b,w
  2609  0190  3EBF               	addlw	191
  2610  0191  00F5               	movwf	??_Lcd_Set_Cursor
  2611  0192  0875               	movf	??_Lcd_Set_Cursor,w
  2612  0193  00FA               	movwf	Lcd_Set_Cursor@temp
  2613                           
  2614                           ;./lcd.h: 56:   z = temp>>4;
  2615  0194  087A               	movf	Lcd_Set_Cursor@temp,w
  2616  0195  00F5               	movwf	??_Lcd_Set_Cursor
  2617  0196  3004               	movlw	4
  2618  0197                     u1175:	
  2619  0197  1003               	clrc
  2620  0198  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2621  0199  3EFF               	addlw	-1
  2622  019A  1D03               	skipz
  2623  019B  2997               	goto	u1175
  2624  019C  0875               	movf	??_Lcd_Set_Cursor,w
  2625  019D  00F6               	movwf	??_Lcd_Set_Cursor+1
  2626  019E  0876               	movf	??_Lcd_Set_Cursor+1,w
  2627  019F  00F8               	movwf	Lcd_Set_Cursor@z
  2628                           
  2629                           ;./lcd.h: 57:   y = temp & 0x0F;
  2630  01A0  087A               	movf	Lcd_Set_Cursor@temp,w
  2631  01A1  390F               	andlw	15
  2632  01A2  00F5               	movwf	??_Lcd_Set_Cursor
  2633  01A3  0875               	movf	??_Lcd_Set_Cursor,w
  2634  01A4  00F9               	movwf	Lcd_Set_Cursor@y
  2635                           
  2636                           ;./lcd.h: 58:   Lcd_Cmd(z);
  2637  01A5  0878               	movf	Lcd_Set_Cursor@z,w
  2638  01A6  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2639                           
  2640                           ;./lcd.h: 59:   Lcd_Cmd(y);
  2641  01AB  0879               	movf	Lcd_Set_Cursor@y,w
  2642  01AC  120A  158A  27B4   	fcall	_Lcd_Cmd
  2643  01AF  0008               	return
  2644  01B0                     __end_of_Lcd_Set_Cursor:	
  2645                           
  2646                           	psect	text8
  2647  01B0                     __ptext8:	
  2648 ;; *************** function _Lcd_Init *****************
  2649 ;; Defined at:
  2650 ;;		line 63 in file "./lcd.h"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2, status,0, pclath, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2664 ;;      Params:         0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0
  2666 ;;      Temps:          2       0       0       0       0
  2667 ;;      Totals:         2       0       0       0       0
  2668 ;;Total ram usage:        2 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    2
  2671 ;; This function calls:
  2672 ;;		_Lcd_Cmd
  2673 ;;		_Lcd_Port
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _Lcd_Init
  2681  01B0                     _Lcd_Init:	
  2682                           
  2683                           ;./lcd.h: 65:   Lcd_Port(0x00);
  2684                           
  2685                           ;incstack = 0
  2686                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2687  01B0  3000               	movlw	0
  2688  01B1  120A  158A  279A  120A  118A  	fcall	_Lcd_Port
  2689                           
  2690                           ;./lcd.h: 66:    _delay((unsigned long)((20)*(16000000/4000.0)));
  2691  01B6  3068               	movlw	104
  2692  01B7  00F5               	movwf	??_Lcd_Init+1
  2693  01B8  30E4               	movlw	228
  2694  01B9  00F4               	movwf	??_Lcd_Init
  2695  01BA                     u1587:	
  2696  01BA  0BF4               	decfsz	??_Lcd_Init,f
  2697  01BB  29BA               	goto	u1587
  2698  01BC  0BF5               	decfsz	??_Lcd_Init+1,f
  2699  01BD  29BA               	goto	u1587
  2700  01BE  0000               	nop
  2701                           
  2702                           ;./lcd.h: 67:   Lcd_Cmd(0x03);
  2703  01BF  3003               	movlw	3
  2704  01C0  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2705                           
  2706                           ;./lcd.h: 68:  _delay((unsigned long)((5)*(16000000/4000.0)));
  2707  01C5  301A               	movlw	26
  2708  01C6  00F5               	movwf	??_Lcd_Init+1
  2709  01C7  30F8               	movlw	248
  2710  01C8  00F4               	movwf	??_Lcd_Init
  2711  01C9                     u1597:	
  2712  01C9  0BF4               	decfsz	??_Lcd_Init,f
  2713  01CA  29C9               	goto	u1597
  2714  01CB  0BF5               	decfsz	??_Lcd_Init+1,f
  2715  01CC  29C9               	goto	u1597
  2716  01CD  0000               	nop
  2717                           
  2718                           ;./lcd.h: 69:   Lcd_Cmd(0x03);
  2719  01CE  3003               	movlw	3
  2720  01CF  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2721                           
  2722                           ;./lcd.h: 70:  _delay((unsigned long)((11)*(16000000/4000.0)));
  2723  01D4  303A               	movlw	58
  2724  01D5  00F5               	movwf	??_Lcd_Init+1
  2725  01D6  3023               	movlw	35
  2726  01D7  00F4               	movwf	??_Lcd_Init
  2727  01D8                     u1607:	
  2728  01D8  0BF4               	decfsz	??_Lcd_Init,f
  2729  01D9  29D8               	goto	u1607
  2730  01DA  0BF5               	decfsz	??_Lcd_Init+1,f
  2731  01DB  29D8               	goto	u1607
  2732                           
  2733                           ;./lcd.h: 71:   Lcd_Cmd(0x03);
  2734  01DC  3003               	movlw	3
  2735  01DD  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2736                           
  2737                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  2738  01E2  3002               	movlw	2
  2739  01E3  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2740                           
  2741                           ;./lcd.h: 74:   Lcd_Cmd(0x02);
  2742  01E8  3002               	movlw	2
  2743  01E9  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2744                           
  2745                           ;./lcd.h: 75:   Lcd_Cmd(0x08);
  2746  01EE  3008               	movlw	8
  2747  01EF  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2748                           
  2749                           ;./lcd.h: 76:   Lcd_Cmd(0x00);
  2750  01F4  3000               	movlw	0
  2751  01F5  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2752                           
  2753                           ;./lcd.h: 77:   Lcd_Cmd(0x0C);
  2754  01FA  300C               	movlw	12
  2755  01FB  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2756                           
  2757                           ;./lcd.h: 78:   Lcd_Cmd(0x00);
  2758  0200  3000               	movlw	0
  2759  0201  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2760                           
  2761                           ;./lcd.h: 79:   Lcd_Cmd(0x06);
  2762  0206  3006               	movlw	6
  2763  0207  120A  158A  27B4   	fcall	_Lcd_Cmd
  2764  020A  0008               	return
  2765  020B                     __end_of_Lcd_Init:	
  2766                           
  2767                           	psect	text9
  2768  00AB                     __ptext9:	
  2769 ;; *************** function _Lcd_Clear *****************
  2770 ;; Defined at:
  2771 ;;		line 36 in file "./lcd.h"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  2   58[None  ] int 
  2778 ;; Registers used:
  2779 ;;		wreg, status,2, status,0, pclath, cstack
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2785 ;;      Params:         0       0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    2
  2792 ;; This function calls:
  2793 ;;		_Lcd_Cmd
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _Lcd_Clear
  2801  00AB                     _Lcd_Clear:	
  2802                           
  2803                           ;./lcd.h: 38:  Lcd_Cmd(0);
  2804                           
  2805                           ;incstack = 0
  2806                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2807  00AB  3000               	movlw	0
  2808  00AC  120A  158A  27B4  120A  118A  	fcall	_Lcd_Cmd
  2809                           
  2810                           ;./lcd.h: 39:  Lcd_Cmd(1);
  2811  00B1  3001               	movlw	1
  2812  00B2  120A  158A  27B4   	fcall	_Lcd_Cmd
  2813  00B5  0008               	return
  2814  00B6                     __end_of_Lcd_Clear:	
  2815                           
  2816                           	psect	text10
  2817  0FB4                     __ptext10:	
  2818 ;; *************** function _Lcd_Cmd *****************
  2819 ;; Defined at:
  2820 ;;		line 26 in file "./lcd.h"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;  a               1    wreg     unsigned char 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  a               1    3[COMMON] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2834 ;;      Params:         0       0       0       0       0
  2835 ;;      Locals:         1       0       0       0       0
  2836 ;;      Temps:          2       0       0       0       0
  2837 ;;      Totals:         3       0       0       0       0
  2838 ;;Total ram usage:        3 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    1
  2841 ;; This function calls:
  2842 ;;		_Lcd_Port
  2843 ;; This function is called by:
  2844 ;;		_Lcd_Clear
  2845 ;;		_Lcd_Set_Cursor
  2846 ;;		_Lcd_Init
  2847 ;;		_Lcd_Shift_Right
  2848 ;;		_Lcd_Shift_Left
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           
  2853                           ;psect for function _Lcd_Cmd
  2854  0FB4                     _Lcd_Cmd:	
  2855                           
  2856                           ;incstack = 0
  2857                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2858                           ;Lcd_Cmd@a stored from wreg
  2859  0FB4  00F3               	movwf	Lcd_Cmd@a
  2860                           
  2861                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  RD2 = 0;
  2862  0FB5  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0FB6  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0FB7  1108               	bcf	8,2	;volatile
  2865                           
  2866                           ;./lcd.h: 30:  Lcd_Port(a);
  2867  0FB8  0873               	movf	Lcd_Cmd@a,w
  2868  0FB9  120A  158A  279A  120A  158A  	fcall	_Lcd_Port
  2869                           
  2870                           ;./lcd.h: 31:  RD3 = 1;
  2871  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  2873  0FC0  1588               	bsf	8,3	;volatile
  2874                           
  2875                           ;./lcd.h: 32:         _delay((unsigned long)((4)*(16000000/4000.0)));
  2876  0FC1  3015               	movlw	21
  2877  0FC2  00F2               	movwf	??_Lcd_Cmd+1
  2878  0FC3  30C6               	movlw	198
  2879  0FC4  00F1               	movwf	??_Lcd_Cmd
  2880  0FC5                     u1617:	
  2881  0FC5  0BF1               	decfsz	??_Lcd_Cmd,f
  2882  0FC6  2FC5               	goto	u1617
  2883  0FC7  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2884  0FC8  2FC5               	goto	u1617
  2885  0FC9  0000               	nop
  2886                           
  2887                           ;./lcd.h: 33:         RD3 = 0;
  2888  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2889  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2890  0FCC  1188               	bcf	8,3	;volatile
  2891  0FCD  0008               	return
  2892  0FCE                     __end_of_Lcd_Cmd:	
  2893                           
  2894                           	psect	text11
  2895  0F9A                     __ptext11:	
  2896 ;; *************** function _Lcd_Port *****************
  2897 ;; Defined at:
  2898 ;;		line 4 in file "./lcd.h"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  a               1    wreg     unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  a               1    0[COMMON] unsigned char 
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2912 ;;      Params:         0       0       0       0       0
  2913 ;;      Locals:         1       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0
  2915 ;;      Totals:         1       0       0       0       0
  2916 ;;Total ram usage:        1 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; This function calls:
  2919 ;;		Nothing
  2920 ;; This function is called by:
  2921 ;;		_Lcd_Cmd
  2922 ;;		_Lcd_Init
  2923 ;;		_Lcd_Write_Char
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function _Lcd_Port
  2929  0F9A                     _Lcd_Port:	
  2930                           
  2931                           ;incstack = 0
  2932                           ; Regs used in _Lcd_Port: [wreg]
  2933                           ;Lcd_Port@a stored from wreg
  2934  0F9A  00F0               	movwf	Lcd_Port@a
  2935                           
  2936                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  2937  0F9B  1C70               	btfss	Lcd_Port@a,0
  2938  0F9C  2FA1               	goto	l45
  2939                           
  2940                           ;./lcd.h: 7:   RD4 = 1;
  2941  0F9D  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0F9E  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0F9F  1608               	bsf	8,4	;volatile
  2944  0FA0  2FA4               	goto	l46
  2945  0FA1                     l45:	
  2946                           ;./lcd.h: 8:  else
  2947                           
  2948                           
  2949                           ;./lcd.h: 9:   RD4 = 0;
  2950  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  2951  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  2952  0FA3  1208               	bcf	8,4	;volatile
  2953  0FA4                     l46:	
  2954                           
  2955                           ;./lcd.h: 11:  if(a & 2)
  2956  0FA4  1CF0               	btfss	Lcd_Port@a,1
  2957  0FA5  2FA8               	goto	l47
  2958                           
  2959                           ;./lcd.h: 12:   RD5 = 1;
  2960  0FA6  1688               	bsf	8,5	;volatile
  2961  0FA7  2FA9               	goto	l48
  2962  0FA8                     l47:	
  2963                           ;./lcd.h: 13:  else
  2964                           
  2965                           
  2966                           ;./lcd.h: 14:   RD5 = 0;
  2967  0FA8  1288               	bcf	8,5	;volatile
  2968  0FA9                     l48:	
  2969                           
  2970                           ;./lcd.h: 16:  if(a & 4)
  2971  0FA9  1D70               	btfss	Lcd_Port@a,2
  2972  0FAA  2FAD               	goto	l49
  2973                           
  2974                           ;./lcd.h: 17:   RD6 = 1;
  2975  0FAB  1708               	bsf	8,6	;volatile
  2976  0FAC  2FAE               	goto	l50
  2977  0FAD                     l49:	
  2978                           ;./lcd.h: 18:  else
  2979                           
  2980                           
  2981                           ;./lcd.h: 19:   RD6 = 0;
  2982  0FAD  1308               	bcf	8,6	;volatile
  2983  0FAE                     l50:	
  2984                           
  2985                           ;./lcd.h: 21:  if(a & 8)
  2986  0FAE  1DF0               	btfss	Lcd_Port@a,3
  2987  0FAF  2FB2               	goto	l51
  2988                           
  2989                           ;./lcd.h: 22:   RD7 = 1;
  2990  0FB0  1788               	bsf	8,7	;volatile
  2991  0FB1  0008               	return
  2992  0FB2                     l51:	
  2993                           ;./lcd.h: 23:  else
  2994                           
  2995                           
  2996                           ;./lcd.h: 24:   RD7 = 0;
  2997  0FB2  1388               	bcf	8,7	;volatile
  2998  0FB3  0008               	return
  2999  0FB4                     __end_of_Lcd_Port:	
  3000                           
  3001                           	psect	text12
  3002  0F80                     __ptext12:	
  3003 ;; *************** function _Keypad_Init *****************
  3004 ;; Defined at:
  3005 ;;		line 119 in file "./lcd.h"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;		None
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, status,2
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3019 ;;      Params:         0       0       0       0       0
  3020 ;;      Locals:         0       0       0       0       0
  3021 ;;      Temps:          0       0       0       0       0
  3022 ;;      Totals:         0       0       0       0       0
  3023 ;;Total ram usage:        0 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_main
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function _Keypad_Init
  3034  0F80                     _Keypad_Init:	
  3035                           
  3036                           ;./lcd.h: 123:  PORTB =0x00;
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _Keypad_Init: [wreg+status,2]
  3040  0F80  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0F81  1303               	bcf	3,6	;RP1=0, select bank0
  3042  0F82  0186               	clrf	6	;volatile
  3043                           
  3044                           ;./lcd.h: 124:  TRISB =0b11110000;
  3045  0F83  30F0               	movlw	240
  3046  0F84  1683               	bsf	3,5	;RP0=1, select bank1
  3047  0F85  1303               	bcf	3,6	;RP1=0, select bank1
  3048  0F86  0086               	movwf	6	;volatile
  3049                           
  3050                           ;./lcd.h: 127:  OPTION_REG=0x7F;
  3051  0F87  307F               	movlw	127
  3052  0F88  0081               	movwf	1	;volatile
  3053  0F89  0008               	return
  3054  0F8A                     __end_of_Keypad_Init:	
  3055                           
  3056                           	psect	text13
  3057  0F8A                     __ptext13:	
  3058 ;; *************** function _GetKey *****************
  3059 ;; Defined at:
  3060 ;;		line 166 in file "./lcd.h"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  key             1    4[COMMON] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      unsigned char 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0, pclath, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3074 ;;      Params:         0       0       0       0       0
  3075 ;;      Locals:         1       0       0       0       0
  3076 ;;      Temps:          1       0       0       0       0
  3077 ;;      Totals:         2       0       0       0       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    1
  3081 ;; This function calls:
  3082 ;;		_READ_SWITCHES
  3083 ;; This function is called by:
  3084 ;;		_main
  3085 ;; This function uses a non-reentrant model
  3086 ;;
  3087                           
  3088                           
  3089                           ;psect for function _GetKey
  3090  0F8A                     _GetKey:	
  3091                           
  3092                           ;./lcd.h: 168:  char key = 'n';
  3093                           
  3094                           ;incstack = 0
  3095                           ; Regs used in _GetKey: [wreg+status,2+status,0+pclath+cstack]
  3096  0F8A  306E               	movlw	110
  3097  0F8B                     L2:	
  3098  0F8B  00F3               	movwf	??_GetKey
  3099  0F8C  0873               	movf	??_GetKey,w
  3100  0F8D  00F4               	movwf	GetKey@key
  3101                           
  3102                           ;./lcd.h: 170:  while(key=='n')
  3103  0F8E  306E               	movlw	110
  3104  0F8F  0674               	xorwf	GetKey@key,w
  3105  0F90  1D03               	btfss	3,2
  3106  0F91  2F98               	goto	l1616
  3107                           
  3108                           ;./lcd.h: 171:   key = READ_SWITCHES();
  3109                           
  3110                           ;./lcd.h: 170:  while(key=='n')
  3111  0F92  120A  118A  2351  120A  158A  	fcall	_READ_SWITCHES
  3112  0F97  2F8B               	goto	L2
  3113  0F98                     l1616:	
  3114                           
  3115                           ;./lcd.h: 173:  return key;
  3116  0F98  0874               	movf	GetKey@key,w
  3117  0F99  0008               	return
  3118  0F9A                     __end_of_GetKey:	
  3119                           
  3120                           	psect	text14
  3121  0351                     __ptext14:	
  3122 ;; *************** function _READ_SWITCHES *****************
  3123 ;; Defined at:
  3124 ;;		line 134 in file "./lcd.h"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      unsigned char 
  3131 ;; Registers used:
  3132 ;;		wreg
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3138 ;;      Params:         0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0
  3140 ;;      Temps:          3       0       0       0       0
  3141 ;;      Totals:         3       0       0       0       0
  3142 ;;Total ram usage:        3 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_GetKey
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _READ_SWITCHES
  3153  0351                     _READ_SWITCHES:	
  3154                           
  3155                           ;./lcd.h: 136:  RB0=0; RB1=1; RB2=1; RB3=1;
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _READ_SWITCHES: [wreg]
  3159  0351  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0352  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0353  1006               	bcf	6,0	;volatile
  3162  0354  1486               	bsf	6,1	;volatile
  3163  0355  1506               	bsf	6,2	;volatile
  3164  0356  1586               	bsf	6,3	;volatile
  3165                           
  3166                           ;./lcd.h: 138:  if (RB4==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B4==0); return '1'; }
  3167  0357  1A06               	btfsc	6,4	;volatile
  3168  0358  2B6C               	goto	l89
  3169  0359  3006               	movlw	6
  3170  035A  00F2               	movwf	??_READ_SWITCHES+2
  3171  035B  3013               	movlw	19
  3172  035C  00F1               	movwf	??_READ_SWITCHES+1
  3173  035D  30AD               	movlw	173
  3174  035E  00F0               	movwf	??_READ_SWITCHES
  3175  035F                     u1627:	
  3176  035F  0BF0               	decfsz	??_READ_SWITCHES,f
  3177  0360  2B5F               	goto	u1627
  3178  0361  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3179  0362  2B5F               	goto	u1627
  3180  0363  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3181  0364  2B5F               	goto	u1627
  3182  0365  2B66               	nop2
  3183  0366                     l90:	
  3184  0366  1283               	bcf	3,5	;RP0=0, select bank0
  3185  0367  1303               	bcf	3,6	;RP1=0, select bank0
  3186  0368  1E06               	btfss	6,4	;volatile
  3187  0369  2B66               	goto	l90
  3188  036A  3031               	movlw	49
  3189  036B  0008               	return
  3190  036C                     l89:	
  3191                           
  3192                           ;./lcd.h: 139:  if (RB5==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B5==0); return '2'; }
  3193  036C  1A86               	btfsc	6,5	;volatile
  3194  036D  2B81               	goto	l94
  3195  036E  3006               	movlw	6
  3196  036F  00F2               	movwf	??_READ_SWITCHES+2
  3197  0370  3013               	movlw	19
  3198  0371  00F1               	movwf	??_READ_SWITCHES+1
  3199  0372  30AD               	movlw	173
  3200  0373  00F0               	movwf	??_READ_SWITCHES
  3201  0374                     u1637:	
  3202  0374  0BF0               	decfsz	??_READ_SWITCHES,f
  3203  0375  2B74               	goto	u1637
  3204  0376  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3205  0377  2B74               	goto	u1637
  3206  0378  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3207  0379  2B74               	goto	u1637
  3208  037A  2B7B               	nop2
  3209  037B                     l95:	
  3210  037B  1283               	bcf	3,5	;RP0=0, select bank0
  3211  037C  1303               	bcf	3,6	;RP1=0, select bank0
  3212  037D  1E86               	btfss	6,5	;volatile
  3213  037E  2B7B               	goto	l95
  3214  037F  3032               	movlw	50
  3215  0380  0008               	return
  3216  0381                     l94:	
  3217                           
  3218                           ;./lcd.h: 140:  if (RB6==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B6==0); return '3'; }
  3219  0381  1B06               	btfsc	6,6	;volatile
  3220  0382  2B96               	goto	l98
  3221  0383  3006               	movlw	6
  3222  0384  00F2               	movwf	??_READ_SWITCHES+2
  3223  0385  3013               	movlw	19
  3224  0386  00F1               	movwf	??_READ_SWITCHES+1
  3225  0387  30AD               	movlw	173
  3226  0388  00F0               	movwf	??_READ_SWITCHES
  3227  0389                     u1647:	
  3228  0389  0BF0               	decfsz	??_READ_SWITCHES,f
  3229  038A  2B89               	goto	u1647
  3230  038B  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3231  038C  2B89               	goto	u1647
  3232  038D  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3233  038E  2B89               	goto	u1647
  3234  038F  2B90               	nop2
  3235  0390                     l99:	
  3236  0390  1283               	bcf	3,5	;RP0=0, select bank0
  3237  0391  1303               	bcf	3,6	;RP1=0, select bank0
  3238  0392  1F06               	btfss	6,6	;volatile
  3239  0393  2B90               	goto	l99
  3240  0394  3033               	movlw	51
  3241  0395  0008               	return
  3242  0396                     l98:	
  3243                           
  3244                           ;./lcd.h: 142:  RB0=1; RB1=0; RB2=1; RB3=1;
  3245  0396  1406               	bsf	6,0	;volatile
  3246  0397  1086               	bcf	6,1	;volatile
  3247  0398  1506               	bsf	6,2	;volatile
  3248  0399  1586               	bsf	6,3	;volatile
  3249                           
  3250                           ;./lcd.h: 144:  if (RB4==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B4==0); return '4'; }
  3251  039A  1A06               	btfsc	6,4	;volatile
  3252  039B  2BAF               	goto	l102
  3253  039C  3006               	movlw	6
  3254  039D  00F2               	movwf	??_READ_SWITCHES+2
  3255  039E  3013               	movlw	19
  3256  039F  00F1               	movwf	??_READ_SWITCHES+1
  3257  03A0  30AD               	movlw	173
  3258  03A1  00F0               	movwf	??_READ_SWITCHES
  3259  03A2                     u1657:	
  3260  03A2  0BF0               	decfsz	??_READ_SWITCHES,f
  3261  03A3  2BA2               	goto	u1657
  3262  03A4  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3263  03A5  2BA2               	goto	u1657
  3264  03A6  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3265  03A7  2BA2               	goto	u1657
  3266  03A8  2BA9               	nop2
  3267  03A9                     l103:	
  3268  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  3269  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  3270  03AB  1E06               	btfss	6,4	;volatile
  3271  03AC  2BA9               	goto	l103
  3272  03AD  3034               	movlw	52
  3273  03AE  0008               	return
  3274  03AF                     l102:	
  3275                           
  3276                           ;./lcd.h: 145:  if (RB5==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B5==0); return '5'; }
  3277  03AF  1A86               	btfsc	6,5	;volatile
  3278  03B0  2BC4               	goto	l106
  3279  03B1  3006               	movlw	6
  3280  03B2  00F2               	movwf	??_READ_SWITCHES+2
  3281  03B3  3013               	movlw	19
  3282  03B4  00F1               	movwf	??_READ_SWITCHES+1
  3283  03B5  30AD               	movlw	173
  3284  03B6  00F0               	movwf	??_READ_SWITCHES
  3285  03B7                     u1667:	
  3286  03B7  0BF0               	decfsz	??_READ_SWITCHES,f
  3287  03B8  2BB7               	goto	u1667
  3288  03B9  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3289  03BA  2BB7               	goto	u1667
  3290  03BB  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3291  03BC  2BB7               	goto	u1667
  3292  03BD  2BBE               	nop2
  3293  03BE                     l107:	
  3294  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  3295  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  3296  03C0  1E86               	btfss	6,5	;volatile
  3297  03C1  2BBE               	goto	l107
  3298  03C2  3035               	movlw	53
  3299  03C3  0008               	return
  3300  03C4                     l106:	
  3301                           
  3302                           ;./lcd.h: 146:  if (RB6==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B6==0); return '6'; }
  3303  03C4  1B06               	btfsc	6,6	;volatile
  3304  03C5  2BD9               	goto	l110
  3305  03C6  3006               	movlw	6
  3306  03C7  00F2               	movwf	??_READ_SWITCHES+2
  3307  03C8  3013               	movlw	19
  3308  03C9  00F1               	movwf	??_READ_SWITCHES+1
  3309  03CA  30AD               	movlw	173
  3310  03CB  00F0               	movwf	??_READ_SWITCHES
  3311  03CC                     u1677:	
  3312  03CC  0BF0               	decfsz	??_READ_SWITCHES,f
  3313  03CD  2BCC               	goto	u1677
  3314  03CE  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3315  03CF  2BCC               	goto	u1677
  3316  03D0  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3317  03D1  2BCC               	goto	u1677
  3318  03D2  2BD3               	nop2
  3319  03D3                     l111:	
  3320  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  3321  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  3322  03D5  1F06               	btfss	6,6	;volatile
  3323  03D6  2BD3               	goto	l111
  3324  03D7  3036               	movlw	54
  3325  03D8  0008               	return
  3326  03D9                     l110:	
  3327                           
  3328                           ;./lcd.h: 148:  RB0=1; RB1=1; RB2=0; RB3=1;
  3329  03D9  1406               	bsf	6,0	;volatile
  3330  03DA  1486               	bsf	6,1	;volatile
  3331  03DB  1106               	bcf	6,2	;volatile
  3332  03DC  1586               	bsf	6,3	;volatile
  3333                           
  3334                           ;./lcd.h: 150:  if (RB4==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B4==0); return '7'; }
  3335  03DD  1A06               	btfsc	6,4	;volatile
  3336  03DE  2BF2               	goto	l114
  3337  03DF  3006               	movlw	6
  3338  03E0  00F2               	movwf	??_READ_SWITCHES+2
  3339  03E1  3013               	movlw	19
  3340  03E2  00F1               	movwf	??_READ_SWITCHES+1
  3341  03E3  30AD               	movlw	173
  3342  03E4  00F0               	movwf	??_READ_SWITCHES
  3343  03E5                     u1687:	
  3344  03E5  0BF0               	decfsz	??_READ_SWITCHES,f
  3345  03E6  2BE5               	goto	u1687
  3346  03E7  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3347  03E8  2BE5               	goto	u1687
  3348  03E9  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3349  03EA  2BE5               	goto	u1687
  3350  03EB  2BEC               	nop2
  3351  03EC                     l115:	
  3352  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3353  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3354  03EE  1E06               	btfss	6,4	;volatile
  3355  03EF  2BEC               	goto	l115
  3356  03F0  3037               	movlw	55
  3357  03F1  0008               	return
  3358  03F2                     l114:	
  3359                           
  3360                           ;./lcd.h: 151:  if (RB5==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B5==0); return '8'; }
  3361  03F2  1A86               	btfsc	6,5	;volatile
  3362  03F3  2C07               	goto	l118
  3363  03F4  3006               	movlw	6
  3364  03F5  00F2               	movwf	??_READ_SWITCHES+2
  3365  03F6  3013               	movlw	19
  3366  03F7  00F1               	movwf	??_READ_SWITCHES+1
  3367  03F8  30AD               	movlw	173
  3368  03F9  00F0               	movwf	??_READ_SWITCHES
  3369  03FA                     u1697:	
  3370  03FA  0BF0               	decfsz	??_READ_SWITCHES,f
  3371  03FB  2BFA               	goto	u1697
  3372  03FC  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3373  03FD  2BFA               	goto	u1697
  3374  03FE  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3375  03FF  2BFA               	goto	u1697
  3376  0400  2C01               	nop2
  3377  0401                     l119:	
  3378  0401  1283               	bcf	3,5	;RP0=0, select bank0
  3379  0402  1303               	bcf	3,6	;RP1=0, select bank0
  3380  0403  1E86               	btfss	6,5	;volatile
  3381  0404  2C01               	goto	l119
  3382  0405  3038               	movlw	56
  3383  0406  0008               	return
  3384  0407                     l118:	
  3385                           
  3386                           ;./lcd.h: 152:  if (RB6==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B6==0); return '9'; }
  3387  0407  1B06               	btfsc	6,6	;volatile
  3388  0408  2C1C               	goto	l122
  3389  0409  3006               	movlw	6
  3390  040A  00F2               	movwf	??_READ_SWITCHES+2
  3391  040B  3013               	movlw	19
  3392  040C  00F1               	movwf	??_READ_SWITCHES+1
  3393  040D  30AD               	movlw	173
  3394  040E  00F0               	movwf	??_READ_SWITCHES
  3395  040F                     u1707:	
  3396  040F  0BF0               	decfsz	??_READ_SWITCHES,f
  3397  0410  2C0F               	goto	u1707
  3398  0411  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3399  0412  2C0F               	goto	u1707
  3400  0413  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3401  0414  2C0F               	goto	u1707
  3402  0415  2C16               	nop2
  3403  0416                     l123:	
  3404  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3405  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3406  0418  1F06               	btfss	6,6	;volatile
  3407  0419  2C16               	goto	l123
  3408  041A  3039               	movlw	57
  3409  041B  0008               	return
  3410  041C                     l122:	
  3411                           
  3412                           ;./lcd.h: 154:  RB0=1; RB1=1; RB2=1; RB3=0;
  3413  041C  1406               	bsf	6,0	;volatile
  3414  041D  1486               	bsf	6,1	;volatile
  3415  041E  1506               	bsf	6,2	;volatile
  3416  041F  1186               	bcf	6,3	;volatile
  3417                           
  3418                           ;./lcd.h: 156:  if (RB4==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B4==0); return '*'; }
  3419  0420  1A06               	btfsc	6,4	;volatile
  3420  0421  2C35               	goto	l126
  3421  0422  3006               	movlw	6
  3422  0423  00F2               	movwf	??_READ_SWITCHES+2
  3423  0424  3013               	movlw	19
  3424  0425  00F1               	movwf	??_READ_SWITCHES+1
  3425  0426  30AD               	movlw	173
  3426  0427  00F0               	movwf	??_READ_SWITCHES
  3427  0428                     u1717:	
  3428  0428  0BF0               	decfsz	??_READ_SWITCHES,f
  3429  0429  2C28               	goto	u1717
  3430  042A  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3431  042B  2C28               	goto	u1717
  3432  042C  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3433  042D  2C28               	goto	u1717
  3434  042E  2C2F               	nop2
  3435  042F                     l127:	
  3436  042F  1283               	bcf	3,5	;RP0=0, select bank0
  3437  0430  1303               	bcf	3,6	;RP1=0, select bank0
  3438  0431  1E06               	btfss	6,4	;volatile
  3439  0432  2C2F               	goto	l127
  3440  0433  302A               	movlw	42
  3441  0434  0008               	return
  3442  0435                     l126:	
  3443                           
  3444                           ;./lcd.h: 157:  if (RB5==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B5==0); return '0'; }
  3445  0435  1A86               	btfsc	6,5	;volatile
  3446  0436  2C4A               	goto	l130
  3447  0437  3006               	movlw	6
  3448  0438  00F2               	movwf	??_READ_SWITCHES+2
  3449  0439  3013               	movlw	19
  3450  043A  00F1               	movwf	??_READ_SWITCHES+1
  3451  043B  30AD               	movlw	173
  3452  043C  00F0               	movwf	??_READ_SWITCHES
  3453  043D                     u1727:	
  3454  043D  0BF0               	decfsz	??_READ_SWITCHES,f
  3455  043E  2C3D               	goto	u1727
  3456  043F  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3457  0440  2C3D               	goto	u1727
  3458  0441  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3459  0442  2C3D               	goto	u1727
  3460  0443  2C44               	nop2
  3461  0444                     l131:	
  3462  0444  1283               	bcf	3,5	;RP0=0, select bank0
  3463  0445  1303               	bcf	3,6	;RP1=0, select bank0
  3464  0446  1E86               	btfss	6,5	;volatile
  3465  0447  2C44               	goto	l131
  3466  0448  3030               	movlw	48
  3467  0449  0008               	return
  3468  044A                     l130:	
  3469                           
  3470                           ;./lcd.h: 158:  if (RB6==0) { _delay((unsigned long)((250)*(16000000/4000.0))); while (R
      +                          B6==0); return '#'; }
  3471  044A  1B06               	btfsc	6,6	;volatile
  3472  044B  2C5F               	goto	l1512
  3473  044C  3006               	movlw	6
  3474  044D  00F2               	movwf	??_READ_SWITCHES+2
  3475  044E  3013               	movlw	19
  3476  044F  00F1               	movwf	??_READ_SWITCHES+1
  3477  0450  30AD               	movlw	173
  3478  0451  00F0               	movwf	??_READ_SWITCHES
  3479  0452                     u1737:	
  3480  0452  0BF0               	decfsz	??_READ_SWITCHES,f
  3481  0453  2C52               	goto	u1737
  3482  0454  0BF1               	decfsz	??_READ_SWITCHES+1,f
  3483  0455  2C52               	goto	u1737
  3484  0456  0BF2               	decfsz	??_READ_SWITCHES+2,f
  3485  0457  2C52               	goto	u1737
  3486  0458  2C59               	nop2
  3487  0459                     l135:	
  3488  0459  1283               	bcf	3,5	;RP0=0, select bank0
  3489  045A  1303               	bcf	3,6	;RP1=0, select bank0
  3490  045B  1F06               	btfss	6,6	;volatile
  3491  045C  2C59               	goto	l135
  3492  045D  3023               	movlw	35
  3493  045E  0008               	return
  3494  045F                     l1512:	
  3495                           
  3496                           ;./lcd.h: 160:  return 'n';
  3497  045F  306E               	movlw	110
  3498  0460  0008               	return
  3499  0461                     __end_of_READ_SWITCHES:	
  3500  007E                     btemp	set	126	;btemp
  3501  007E                     wtemp0	set	126


Data Sizes:
    Strings     139
    Constant    10
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     66      66
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 12
		 -> main@Nes1(BANK0[12]), main@Nes(BANK0[12]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[10]), STR_12(CODE[16]), main@Nes1(BANK0[12]), STR_10(CODE[16]), 
		 -> STR_9(CODE[10]), STR_8(CODE[11]), STR_7(CODE[15]), STR_6(CODE[15]), 
		 -> STR_5(CODE[12]), STR_4(CODE[17]), main@Nes(BANK0[12]), STR_2(CODE[14]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _GetKey->_READ_SWITCHES

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                53    53      0    6567
                                             13 BANK0     53    53      0
                             _GetKey
                        _Keypad_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                           _Lock_Buz
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lock_Buz                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1256
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2280
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetKey                                               2     2      0      46
                                              3 COMMON     2     2      0
                      _READ_SWITCHES
 ---------------------------------------------------------------------------------
 (2) _READ_SWITCHES                                        3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetKey
     _READ_SWITCHES
   _Keypad_Init
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Lock_Buz
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     42      42       5       82.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Jul 10 16:59:31 2019

                        pc 0002                __CFG_CP$OFF 0000                         l50 0FAE  
                       l51 0FB2                         l45 0FA1                         l46 0FA4  
                       l47 0FA8                         l48 0FA9                         l49 0FAD  
                       l90 0366                         l94 0381                         l95 037B  
                       l89 036C                         l98 0396                         l99 0390  
                       fsr 0004                        l110 03D9                        l102 03AF  
                      l111 03D3                        l103 03A9                        l130 044A  
                      l122 041C                        l114 03F2                        l106 03C4  
                      l131 0444                        l123 0416                        l115 03EC  
                      l107 03BE                        l126 0435                        l118 0407  
                      l135 0459                        l127 042F                        l119 0401  
                      _RB0 0030                        _RB1 0031                        _RB2 0032  
                      _RB3 0033                        _RB4 0034                        _RB5 0035  
                      _RD2 0042                        _RB6 0036                        _RD3 0043  
                      _RD4 0044                        _RD5 0045                        _RD6 0046  
                      _RD7 0047               __CFG_CPD$OFF 0000                        u765 00C7  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
             __CFG_LVP$OFF 0000                       l1512 045F                       l1602 012B  
                     l1534 0119                       l1526 00F5                       l1550 0FD4  
                     l1616 0F98                       l1528 0103                       l1552 0FE2  
                     l1560 0FFB                       l1712 030B                       l1704 0307  
                     l1538 0124                       l1714 0280                       l1810 04BC  
                     l1556 0FF0                       l1716 034C                       l1670 02A0  
                     l1576 018B                       l1824 04F4                       l1826 074B  
                     l1692 02D7                       l1676 02BE                       l1828 04F9  
                     l1686 02D5                       l1918 074F                       l1928 0771  
                     l1960 07ED                       l1768 0683                       l1698 02F8  
                     l1956 07E6                       l1986 02B3                       STR_1 002E  
                     STR_2 006C                       STR_3 00A5                       STR_4 001D  
                     STR_5 007A                       STR_6 004E                       STR_7 005D  
                     STR_8 0086                       STR_9 009B                       u1025 00F8  
                     u1115 0FE8                       u1045 0104                       u1125 0FF1  
                     u1055 0110                       u1065 011A                       u1155 0172  
                     u1245 02EE                       u1175 0197                       u1095 0FD7  
                     u1425 077A                       u1507 0219                       u1517 022A  
                     u1437 04AF                       u1607 01D8                       u1527 023B  
                     u1447 073E                       u1617 0FC5                       u1537 024C  
                     u1457 0591                       u1707 040F                       u1627 035F  
                     u1547 025D                       u1467 0624                       u1717 0428  
                     u1637 0374                       u1557 026E                       u1477 067C  
                     u1727 043D                       u1647 0389                       u1567 00D7  
                     u1487 07C6                       u1737 0452                       u1657 03A2  
                     u1577 00E7                       u1497 07D7                       u1667 03B7  
                     u1587 01BA                       u1677 03CC                       u1597 01C9  
                     u1687 03E5                       u1697 03FA               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0075                       _main 0461                       btemp 007E  
            __CFG_BOREN$ON 0000                       start 0000         ??_Lcd_Write_String 0077  
          __end_of_Lcd_Cmd 0FCE     __size_of_READ_SWITCHES 0110                      ?_main 0070  
                    STR_10 003E                      STR_11 00A5                      STR_12 003E  
                    STR_13 0091              __CFG_WDTE$OFF 0000            __end_of___lwdiv 0129  
          __end_of___lwmod 1000              ??_Keypad_Init 0070                      _PORTB 0006  
  __size_of_Lcd_Set_Cursor 004A                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088            __end_of_dpowers 001D                      main@R 0060  
                    main@i 0050                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0351           __end_of_Lcd_Init 020B  
         __end_of_Lcd_Port 0FB4            __initialization 07FC               __end_of_main 07FC  
         __end_of_Lock_Buz 0279                     ??_main 002D         __size_of_Lcd_Clear 000B  
      __end_of_Keypad_Init 0F8A              _READ_SWITCHES 0351                  ??_Lcd_Cmd 0071  
  __size_of_Lcd_Write_Char 0037                     _GetKey 0F8A             __CFG_PWRTE$OFF 0000  
                ??___lwdiv 0074                  ??___lwmod 007C                     main@R1 0056  
                   main@p1 004C                     main@p2 004D                     main@p3 004E  
                   main@p4 004F                     main@r1 0048                     main@r2 0049  
                   main@r3 004A                     main@r4 004B                  ??_sprintf 0023  
           ?_READ_SWITCHES 0070            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 00B6             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0166  
              _Keypad_Init 0F80                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                ?_Lock_Buz 0070                    ?_GetKey 0070                 __pmaintext 0461  
__size_of_Lcd_Write_String 003D     __end_of_Lcd_Set_Cursor 01B0            ??_READ_SWITCHES 0070  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 00B6                    _Lcd_Cmd 0FB4                 ??_Lock_Buz 0070  
          __size_of_GetKey 0010                    ___lwdiv 00ED                    ___lwmod 0FCE  
          ?_Lcd_Set_Cursor 0074                    __ptext1 0279                    __ptext2 0FCE  
                  __ptext3 00ED                    __ptext4 020B                    __ptext5 0129  
                  __ptext6 00B6                    __ptext7 0166                    __ptext8 01B0  
                  __ptext9 00AB                    _dpowers 0013                    main@Nes 0030  
                  _sprintf 0279     __end_of_Lcd_Write_Char 00ED       end_of_initialization 07FC  
                GetKey@key 0074                  Lcd_Port@a 0070                  _PORTCbits 0007  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0075          Lcd_Write_String@i 007A  
           __end_of_GetKey 0F9A                  _Lcd_Clear 00AB           _Lcd_Write_String 0129  
             ?_Keypad_Init 0070        start_initialization 07FC          __size_of_Lcd_Init 005B  
        __size_of_Lcd_Port 001A                   ??_GetKey 0073          __size_of_Lock_Buz 006E  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0002              __pcstackBANK0 0020                   ?_Lcd_Cmd 0070  
              sprintf@flag 0027                sprintf@prec 0028           ___lwdiv@dividend 0072  
         ??_Lcd_Set_Cursor 0075                   ?___lwdiv 0070                   ?___lwmod 0078  
                __pstrings 0003           ___lwdiv@quotient 0075                   ?_sprintf 0020  
    __end_of_READ_SWITCHES 0461                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0012           ??_Lcd_Write_Char 0071                   _Lcd_Init 01B0  
     __size_of_Keypad_Init 000A                   _Lcd_Port 0F9A   __end_of_Lcd_Write_String 0166  
                 _Lock_Buz 020B           __size_of_Lcd_Cmd 001A           __size_of___lwdiv 003C  
         __size_of___lwmod 0032         __end_of__stringtab 0013                 sprintf@val 0029  
          ___lwdiv@divisor 0070            ___lwdiv@counter 0077                   __ptext10 0FB4  
                 __ptext11 0F9A                   __ptext12 0F80                   __ptext13 0F8A  
                 __ptext14 0351           __size_of_sprintf 00D8              __size_of_main 039B  
                 main@Key1 005C                   main@Key2 005D                   main@Key3 005E  
                 main@Key4 005F                   main@Nes1 003C                   main@rs11 0052  
                 main@rs12 0058                   main@rs21 0053                   main@rs22 0059  
                 main@rs31 0054                   main@rs32 005A                   main@rs41 0055  
                 main@rs42 005B         Lcd_Write_Char@temp 0072                  sprintf@ap 0026  
                sprintf@sp 002B           ___lwmod@dividend 007A                  stringcode 000D  
       Lcd_Set_Cursor@temp 007A                 _OPTION_REG 0081                   sprintf@c 002C  
                 sprintf@f 0020            ___lwmod@divisor 0078            ___lwmod@counter 007D  
                 stringdir 000D                   stringtab 0003  
